<#@ assembly name="System.Core" #>
<#@ template debug="true" hostSpecific="true" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Linq" #>
<#+ 
    static readonly string ttEscape = Path.Combine("..", "..");
    static readonly string testPathPrefix = Path.Combine(ttEscape, @"psr-tests");
    const string testConfigurationName = "testconfig.txt";
    const string testPattern = @"*.test.pxs";
    
    const char configSectionSep = '>';
    const char configEntrySep = '|';
	const char configDependencySep = '<';

	class Dependency
	{
		public string FileName;
		public IEnumerable<string> Dependencies;
	}

	class Configuration 
	{
		public string TestFileName;
		public IEnumerable<string> TestCases;
		public IEnumerable<Dependency> UnitsUnderTest;
		public IEnumerable<Dependency> TestDependencies;
	}

    ///<summary>A Prexonite Script 2.0 test suite that relies on self-assembling build plans
    /// to load its dependencies.</summary>
    class ConfigurationV2
    {
        public string TestFileName;
        public IEnumerable<string> TestCases;
    }

	Dependency _getDependencies(string spec)
	{
		var ds = spec.Split(configDependencySep);
		return new Dependency
		{
			FileName = _normalizePath(ds[0]),
			Dependencies = ds.Skip(1).Select(_normalizePath)
		};
	}
	
    // Normalize directory separator for cross-platform testing
    static string _normalizePath(string path) => path
        .Replace('/', System.IO.Path.DirectorySeparatorChar)
        .Replace('\\', System.IO.Path.DirectorySeparatorChar);
        

    // [(test_file_name, [under_test], [test_deps], [test_case])] 
    IEnumerable<Configuration> _getTestConfiguration()
    {

        var path = Path.GetFullPath(Host.ResolvePath(Path.Combine(testPathPrefix, testConfigurationName)));
        using var sr = new StreamReader(
            new FileStream(path, FileMode.Open, FileAccess.Read), 
            System.Text.Encoding.UTF8);
        var line = sr.ReadLine();
        while(line != null && line.Length > 2)
        {   
            var fs = line.Split(new [] {configSectionSep},4);
            if(fs.Length < 4)
                continue;

            var tfn = _normalizePath(fs[0]);
            var entrySep = new []{configEntrySep};
            var underTest = fs[1].Split(entrySep).Skip(1).Select(_getDependencies);
            var deps      = fs[2].Split(entrySep).Skip(1).Select(_getDependencies);
            var testCases = fs[3].Split(entrySep).Skip(1);
            yield return new Configuration {
                TestFileName = tfn,
                TestCases = testCases,
                UnitsUnderTest = underTest,
                TestDependencies = deps
            };

            line = sr.ReadLine();
        }
    }

    IEnumerable<ConfigurationV2> _getTestConfigurationV2()
    {
        var path = Path.GetFullPath(Host.ResolvePath(Path.Combine(testPathPrefix, "_2", testConfigurationName)));
        using var sr = new StreamReader(new FileStream(path, FileMode.Open, FileAccess.Read), Encoding.UTF8);
        var line = sr.ReadLine();
        while (line != null)
        {
            if (line.Length < 3)
            {
                continue;
            }

            var fs = line.Split(new[]{configSectionSep}, 2);
            var tfn = _normalizePath(fs[0]);
            var entrySep = new[] {configEntrySep};
            var testCases = fs[1].Split(entrySep).Skip(1);
            yield return new ConfigurationV2()
            {
                TestFileName = tfn,
                TestCases = testCases
            };

            line = sr.ReadLine();
        }
    }

    string _toIdentifier(string testFileName)
    {
        testFileName = Path.GetFileName(testFileName);
        return testFileName.Substring(0,testFileName.Length - (testPattern.Length-1)).Replace("-","_");
    }

    string _toTestFilePath(string testFileName)
    {
        var abs = Path.GetFullPath(Host.ResolvePath(Path.Combine(testPathPrefix, testFileName)));
        var root = Path.GetFullPath(Host.ResolvePath(testPathPrefix));
        return "." + abs.Substring(root.Length);
    }
    
    string _toPsrClassName(string fileName)
    {
        return "Unit_" + _toIdentifier(fileName);
    }

    string _validTestName(string richName)
    {
        // This used to be a simple Regex.Replace(testCase, @"[^a-zA-Z0-9_]", "_")
        // but in the move to .NET 3.1 + Mono.TextTemplate + dotnet local tools we somehow lost the
        // advanced capability of loading NuGet assemblies into T4 templates.
        // So... we grudgingly implement that Regex by hand.
        var cs = richName.ToCharArray();
        for (var i = 0; i < cs.Length; i++)
        {
            if ((cs[i] < 'a' || 'z' < cs[i]) && (cs[i] < 'A' || 'Z' < cs[i]) && (cs[i] < '0' || '9' < cs[i]) && cs[i] != '_')
            {
                cs[i] = '_';
            }
        }
        return new string(cs);
    }
#>