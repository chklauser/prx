<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
//< Assembly Name="System.Core.dll" >
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #> 
// ReSharper disable RedundantUsingDirective
// ReSharper disable RedundantNameQualifier
using System;
using System.CodeDom.Compiler;
using System.Reflection;
using System.Collections.Generic;
using Prexonite.Types;
using Prexonite.Compiler.Cil;
using NUnit.Framework;
// ReSharper restore RedundantUsingDirective

// ReSharper disable RedundantExplicitArrayCreation
// ReSharper disable InconsistentNaming

namespace PrexoniteTests.Tests.Configurations
{
<# foreach(var testFile in _getTestConfiguration()) {
    var className = /* "PrexoniteTests.Tests.Configurations." + /* */ _toPsrClassName(testFile.TestFileName);
    var baseName = _toIdentifier(testFile.TestFileName); #>

    [TestFixture]
    [GeneratedCode("VMTestConfiguration.tt","0.0")]
    internal class <#=baseName#>_Interpreted : <#=className#>
    {
        private readonly UnitTestConfiguration _runner = new UnitTestConfiguration.InMemory();
        protected override UnitTestConfiguration Runner => _runner;
    }

    [TestFixture]
    [GeneratedCode("VMTestConfiguration.tt","0.0")]
    internal class <#=baseName#>_CilStatic : <#=className#>
    {
        private readonly UnitTestConfiguration _runner = new UnitTestConfiguration.InMemory{CompileToCil=true};
        protected override UnitTestConfiguration Runner => _runner;
    }

    [TestFixture]
    [GeneratedCode("VMTestConfiguration.tt","0.0")]
    internal class <#=baseName#>_CilIsolated : <#=className#>
    {
        private readonly UnitTestConfiguration _runner = new UnitTestConfiguration.InMemory{
            CompileToCil=true,
            Linking = FunctionLinking.FullyIsolated
        };
        protected override UnitTestConfiguration Runner => _runner;
    }

    [TestFixture]
    [Explicit]
    [GeneratedCode("VMTestConfiguration.tt","0.0")]
    internal class <#=baseName#>_StoredInterpreted : <#=className#>
    {
        private readonly UnitTestConfiguration _runner = new UnitTestConfiguration.FromStored();
        protected override UnitTestConfiguration Runner => _runner;
    }

    [TestFixture]
    [Explicit]
    [GeneratedCode("VMTestConfiguration.tt","0.0")]
    internal class <#=baseName#>_StoredCilStatic : <#=className#>
    {
        private readonly UnitTestConfiguration _runner = new UnitTestConfiguration.FromStored{CompileToCil=true};
        protected override UnitTestConfiguration Runner => _runner;
    }

    
    [TestFixture]
    [Explicit]
    [GeneratedCode("VMTestConfiguration.tt","0.0")]
    internal class <#=baseName#>_StoredCilIsolated : <#=className#>
    {
        private readonly UnitTestConfiguration _runner = new UnitTestConfiguration.FromStored{
            CompileToCil=true,
            Linking = FunctionLinking.JustAvailableForLinking
        };
        protected override UnitTestConfiguration Runner => _runner;
    }
<# } #>

<# foreach(var testFile in _getTestConfigurationV2()) {
    var className = _toPsrClassName(testFile.TestFileName) + "V2";
    var baseName = _toIdentifier(testFile.TestFileName) + "V2"; #>

    [TestFixture]
    [GeneratedCode("VMTestConfiguration.tt","0.0")]
    internal class <#=baseName#>_InterpretedV2 : <#=className#>
    {
        public <#=baseName#>_InterpretedV2() : base(false)
        {
        }
    }

    [TestFixture]
    [GeneratedCode("VMTestConfiguration.tt","0.0")]
    internal class <#=baseName#>_CilIsolatedV2 : <#=className#>
    {
        public <#=baseName#>_CilIsolatedV2() : base(true)
        {
        }
    }
<# } #>

<# foreach(var vmClass in _getVMTestClasses()) { 
    var baseName = vmClass.Substring(vmClass.LastIndexOf('.')+1); #>

    [TestFixture]
    [GeneratedCode("VMTestConfiguration.tt","0.0")]
    internal class <#=baseName#>_Interpreted : <#=vmClass#>
    {
        public <#=baseName#>_Interpreted()
        {
            CompileToCil = false;
        } 
    }

    [TestFixture]
    [GeneratedCode("VMTestConfiguration.tt","0.0")]
    internal class <#=baseName#>_CilStatic : <#=vmClass#>
    {
        public <#=baseName#>_CilStatic()
        {
            CompileToCil = true;
            StaticLinking = FunctionLinking.FullyStatic;
        } 
    }

    [TestFixture]
    [GeneratedCode("VMTestConfiguration.tt","0.0")]
    internal class <#=baseName#>_CilIsolated : <#=vmClass#>
    {
        public <#=baseName#>_CilIsolated()
        {
            CompileToCil = true;
            StaticLinking = FunctionLinking.FullyIsolated;
        } 
    }

<# } #>
}

// ReSharper enable RedundantExplicitArrayCreation
// ReSharper enable InconsistentNaming

<#@ include file="LoadConfiguration.t4" #>

<#+ 

private IEnumerable<string> _getVMTestClasses()
{
    return new []{
        "Prx.Tests.VMTests",
        "PrexoniteTests.Tests.PartialApplication",
        "PrexoniteTests.Tests.Lazy",
        "PrexoniteTests.Tests.Translation",
        "PrexoniteTests.Tests.BuiltInTypeTests",
        "PrexoniteTests.Tests.ShellExtensions"
    };
}

#>