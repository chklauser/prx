//PRX

Name prx::core/0.0;
References {
  prx::prim/0.0
};

namespace prx.core
{
  namespace seq
  {

  }
  export(*),prx.prim(
      map,flat_map,foldl,foldr,sort,all => to_list, where => filter, skip,take,
      count,distinct,union,unique,frequency,groupby,intersect,each,exists,forall,
      takewhile,except,range, reverse, headtail, append, sum, contains,
      create_enumerator,seqconcat);

  namespace nonstrict
  {

  }
  export(*),prx.prim(thunk,asthunk => to_thunk,force,toseq => to_seq);

  namespace rt
  {
    namespace builtin
    {
    
    }
    export(*),prx.prim(
      // constructor (new T)
      create_Bool,
      create_Char,
      create_Hash,
      create_Int,
      create_List,
      create_Null,
      create_Object,
      create_Real,
      create_String,
      create_Structure,
      // type check (is T)
      is_Bool,
      is_Char,
      is_Hash,
      is_Int,
      is_List,
      is_Null,
      is_Object,
      is_Real,
      is_String,
      is_Structure,
      // type cast (~T)
      to_Bool,
      to_Char,
      to_Hash,
      to_Int,
      // don't map to_list; will use `prx.core.seq.to_list` instead
      to_Null,
      to_Object,
      to_Real,
      to_String,
      to_Structure,
      // static call (~T.method)
      static_call_Bool,
      static_call_Char,
      static_call_Hash,
      static_call_Int,
      static_call_List,
      static_call_Null,
      static_call_Object,
      static_call_Real,
      static_call_String,
      static_call_Structure
    ),seq(to_list);
  }
  export(*),prx.prim(caller,LoadAssembly => load_assembly,debug, CompileToCil => compile_to_cil,boxed);

  namespace text
  {

  }
  export(*),prx.prim(setcenter,setleft,setright);

  namespace math
  {

  }
  export(*),prx.prim(abs,ceiling,exp,floor,log,max,min,pi,round,sin,cos,sqrt,tan);

  namespace ct
  {

  }
  export(*),prx.prim(create_source_position, get_unscoped_ast_factory,
    macro\pack => pack, macro\unpack => unpack, macro\reference => macro_reference, call\macro,
    entityref_to);
}
export(*), prx.prim(
  print,
  println,
  dispose,
  char,
  (+),
  (-),
  (*),
  (/),
  $mod,
  (^),
  (&),
  (|),
  $xor,
  (==),
  (!=),
  (>),
  (>=),
  (<),
  (<=),
  (-.),
  $complement,
  $not,
  string_concat,
  create_module_name,
  call,
  call\member,
  call\sub
);

namespace prx.experimental
{
  namespace csp
  {

  }
  export(*), prx.prim(chan,async_seq,call\async,select);
}