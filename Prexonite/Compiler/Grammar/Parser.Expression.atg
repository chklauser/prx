/*
 * Prexonite, a scripting engine (Scripting Language -> Bytecode -> Virtual Machine)
 *  Copyright (C) 2007  Christian "SealedSun" Klauser
 *  E-mail  sealedsun a.t gmail d.ot com
 *  Web     http://www.sealedsun.ch/
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  Please contact me (sealedsun a.t gmail do.t com) if you need a different license.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */


Expr<out AstExpr expr>		    (.
    expr = _NullNode(GetPosition());
    AstExpr ifExpr;
    AstExpr elseExpr;
.)
=
	AtomicExpr<out expr>   
|										(.	bool isNegated = false; ISourcePosition pos = GetPosition(); .)
	(	if
	|	unless							(.	isNegated = true; .)
	)
	lpar Expr<out expr> rpar
	Expr<out ifExpr>
    else
    Expr<out elseExpr>                  (.  expr = Create.ConditionalExpression(pos, expr, ifExpr, elseExpr, isNegated); .)
.


AtomicExpr<out AstExpr expr>
                                        (.  AstExpr outerExpr; .)
=
    AppendRightExpr<out expr>
    {
        then
        AppendRightExpr<out outerExpr>  (.  var thenExpr = Create.Call(GetPosition(), EntityRef.Command.Create(Engine.ThenAlias));
                                            thenExpr.Arguments.Add(expr);
                                            thenExpr.Arguments.Add(outerExpr);
                                            expr = thenExpr;
                                        .)
    }
.


AppendRightExpr<out AstExpr expr>
										(.	AstGetSet complex; .)
=
	KeyValuePairExpr<out expr>
	{	
		appendright
		GetCall<out complex>		    (.	_appendRight(expr,complex);
										    expr = complex;										    
									    .)
	}
.

KeyValuePairExpr<out AstExpr expr>      (. var pos = GetPosition(); .)
=
	OrExpr<out expr>
	[	colon							(.	AstExpr value; .)
		KeyValuePairExpr<out value>		(.	expr = Create.KeyValuePair(pos, expr, value); .)
	]
.

OrExpr<out AstExpr expr>
										(. AstExpr lhs, rhs; .)
=
	AndExpr<out lhs>                    (.  expr = lhs; .)
    [   or OrExpr<out rhs>              (.  expr = new AstLogicalOr(this, lhs, rhs); .)
    ]

.

AndExpr<out AstExpr expr>
                                        (. AstExpr? lhs; AstExpr rhs; .)
=
    DeltaExpr<out lhs>                  (.  expr = lhs ??= Create.Null(GetPosition()); .)
    [   and AndExpr<out rhs>            (.  expr = new AstLogicalAnd(this, lhs, rhs); .)
    ]
.

DeltaExpr<out AstExpr? expr>
                                        (.  AstExpr? lhs, rhs; BinaryOperator bop; UnaryOperator uop; .)
=
    BitOrExpr<out lhs>                  (.  expr = lhs; .)
    {   (   deltaleft                   (.  bop = BinaryOperator.DeltaLeft; uop = UnaryOperator.PostDeltaLeft; .)
        |   deltaright                  (.  bop = BinaryOperator.DeltaRight; uop = UnaryOperator.PostDeltaRight; .)
        )
        (   BitOrExpr<out rhs>          (.  expr = Create.BinaryOperation(GetPosition(), expr!, bop, rhs!); .)
        |                               (.  expr = expr != null ? Create.UnaryOperation(GetPosition(), uop, expr) : null; .)
        )
    }
.

BitOrExpr<out AstExpr? expr>
                                        (. AstExpr? lhs, rhs; .)
=
    BitXorExpr<out lhs>                 (. expr = lhs; .)
    {   bitOr BitXorExpr<out rhs>       (. expr = Create.BinaryOperation(GetPosition(), expr!, BinaryOperator.BitwiseOr, rhs!); .)
    }
.

BitXorExpr<out AstExpr? expr>
                                        (.  AstExpr? lhs, rhs; .)
=
    BitAndExpr<out lhs>                 (.  expr = lhs; .)
    {   xor BitAndExpr<out rhs>
                                        (.  expr = Create.BinaryOperation(GetPosition(), expr!, BinaryOperator.ExclusiveOr, rhs!); .)
    }
.

BitAndExpr<out AstExpr? expr>
                                        (.  AstExpr? lhs, rhs; .)
=
    NotExpr<out lhs>                    (.  expr = lhs; .)
    {   bitAnd NotExpr<out rhs>
                                        (.  expr = Create.BinaryOperation(GetPosition(), expr!, BinaryOperator.BitwiseAnd, rhs!); .)
    }
.

NotExpr<out AstExpr? expr>
                                        (. AstExpr? lhs; bool isNot = false; .)
=
    [   not                             (.  isNot = true; .)
    ]
    EqlExpr<out lhs>                    (.  expr = isNot && lhs != null ? Create.UnaryOperation(GetPosition(), UnaryOperator.LogicalNot, lhs) : lhs; .)
.

EqlExpr<out AstExpr? expr>
                                        (. AstExpr? lhs, rhs; BinaryOperator op; .)
=
    RelExpr<out lhs>                    (. expr = lhs; .)
    {   (   eq                          (.  op = BinaryOperator.Equality; .)
        |   ne                          (.  op = BinaryOperator.Inequality; .)    
        ) RelExpr<out rhs>              (.  expr = Create.BinaryOperation(GetPosition(), expr!, op, rhs!); .)
    }
.

RelExpr<out AstExpr? expr>
                                        (.  AstExpr? lhs, rhs; BinaryOperator op;  .)
=
    CoalExpr<out lhs>                   (.  expr = lhs; .)
    {   (   lt                          (.  op = BinaryOperator.LessThan;              .)
        |   le                          (.  op = BinaryOperator.LessThanOrEqual;       .)
        |   gt                          (.  op = BinaryOperator.GreaterThan;           .)
        |   ge                          (.  op = BinaryOperator.GreaterThanOrEqual;    .)
        ) CoalExpr<out rhs>             (.  expr = Create.BinaryOperation(GetPosition(), expr!, op, rhs!); .)
    }
.

CoalExpr<out AstExpr? expr>
										(.	AstExpr? lhs, rhs; AstCoalescence coal = new AstCoalescence(this); .)
=
	AddExpr<out lhs>					(.	expr = lhs; if(lhs != null) coal.Expressions.Add(lhs); .)
	{
		coalescence
		AddExpr<out rhs>				(.	expr = coal; if(rhs != null) coal.Expressions.Add(rhs); .)
	}
.

AddExpr<out AstExpr? expr>
                                        (.  AstExpr? lhs,rhs; BinaryOperator op; .)
=
    MulExpr<out lhs>                    (.  expr = lhs; .)
    {   (   plus                        (.  op = BinaryOperator.Addition;      .)
        |   minus                       (.  op = BinaryOperator.Subtraction;   .) 
        ) MulExpr<out rhs>              (.  expr = Create.BinaryOperation(GetPosition(), expr!, op, rhs!); .)
    }
.

MulExpr<out AstExpr? expr>
                                        (.  AstExpr? lhs, rhs; BinaryOperator op; .)
=
    PowExpr<out lhs>                    (.  expr = lhs; .)
    {   (   times                       (.  op = BinaryOperator.Multiply;      .)
        |   div                         (.  op = BinaryOperator.Division;        .)
        |   mod                         (.  op = BinaryOperator.Modulus;       .)
        ) PowExpr<out rhs>              (.  expr = Create.BinaryOperation(GetPosition(), expr!, op, rhs!); .)
    }
.

PowExpr<out AstExpr? expr>
                                        (.  AstExpr? lhs, rhs; .)
=
    AssignExpr<out lhs>                  (.  expr = lhs; .)
    {   pow AssignExpr<out rhs>          (.  expr = Create.BinaryOperation(GetPosition(), expr!, BinaryOperator.Power, rhs!); .)
    }
.

AssignExpr<out AstExpr? expr>     (.  AstGetSet assignment; BinaryOperator setModifier = BinaryOperator.None;
                                            AstGetSet? typeExpr;
                                            ISourcePosition position;
                                        .)
=                                       (.  position = GetPosition(); .)
    PostfixUnaryExpr<out expr>
    (IF(isAssignmentOperator())
                                       (.   AstGetSet? lvalue = expr as AstGetSet;
                                            if(lvalue == null) 
                                            {
                                                if(expr != null) {
                                                    Loader.ReportMessage(Message.Error(
                                                        $"Cannot assign to a {expr.GetType().Name}", 
                                                        position, 
                                                        MessageClasses.LValueExpected));
                                                }
                                                assignment = _NullNode(GetPosition()); //to prevent null references
                                            } else {
                                                assignment = lvalue;
                                            }
                                            assignment.Call = PCall.Set;
                                        .)
        (
            (   assign                  (.  setModifier = BinaryOperator.None; .)
	        |   plus assign             (.  setModifier = BinaryOperator.Addition; .)
	        |   minus assign            (.  setModifier = BinaryOperator.Subtraction; .)
	        |   times assign            (.  setModifier = BinaryOperator.Multiply; .)
	        |   div assign              (.  setModifier = BinaryOperator.Division; .)
	        |   bitAnd assign           (.  setModifier = BinaryOperator.BitwiseAnd; .)
	        |   bitOr assign            (.  setModifier = BinaryOperator.BitwiseOr; .)
	        |   coalescence assign      (.  setModifier = BinaryOperator.Coalescence; .)
	        |   deltaleft assign        (.  setModifier = BinaryOperator.DeltaLeft; .)
	        |   deltaright assign       (.  setModifier = BinaryOperator.DeltaRight; .)
	        )   Expr<out expr>        //(.  expr = expr; .)
	        
	    |   tilde  assign               (.  setModifier = BinaryOperator.Cast; .)
	        TypeExpr<out typeExpr, _conversionShift>     
	                                    (.  expr = typeExpr ?? Create.Null(GetPosition()); .)
	    )                               
	                                    (.  assignment.Arguments.Add(expr); 
	                                        if(setModifier == BinaryOperator.None)
	                                            expr = assignment;
	                                        else
	                                            expr = Create.ModifyingAssignment(position,assignment,setModifier);
                                        .)        
    |)
.

PostfixUnaryExpr<out AstExpr? expr>
                                        (.  AstGetSet? type; AstGetSet extension; bool isInverted = false;
                                        .)
=
    PrefixUnaryExpr<out expr>           (.  var position = GetPosition(); .)
    {   tilde TypeExpr<out type, _conversionShift>  
                                        (.  type?.Arguments.Add(expr);  
                                            expr = type ?? Create.Null(GetPosition()); 
                                        .)
    |   is	                            
        [ not						    (.	isInverted = true;.) 
        ]
    	TypeExpr<out type, _typeCheckShift>         
    		                            (.  if (type == null)
                                            {
                                            	var lastPos = GetPosition();
                                                Loader.ReportMessage(Message.Error(Resources.TypeCheck_ExpectedTypeExpression, lastPos, MessageClasses.TypeExpressionExpected));
                                                expr = Create.Constant(GetPosition(), false);
                                            } else {
                                                type.Arguments.Add(expr);
                                                expr = isInverted 
                                                    ? (type.CheckForPlaceholders() 
                                                        // Special handling of "? is not Y" as that's not the same thing
                                                        // as "not (? is Y)" when placeholders are involved.
                                                        ? _createPartialInvertedTypeCheck(position, type)
                                                        : Create.UnaryOperation(position, UnaryOperator.LogicalNot, type)
                                                      )
                                                    : type;
                                            }
    									.)
    |   inc                             (.  expr = Create.UnaryOperation(position, UnaryOperator.PostIncrement, expr ?? _NullNode(GetPosition())); .)
    |   dec                             (.  expr = Create.UnaryOperation(position, UnaryOperator.PostDecrement, expr ?? _NullNode(GetPosition())); .)
    |   GetSetExtension<expr, out extension>
                                        (.  expr = extension; .)
    }
.

PrefixUnaryExpr<out AstExpr? expr>
                                        (.  var prefixes = new Stack<(bool IsSplice, UnaryOperator Op)>(); .)
=                                       (.  var position = GetPosition(); .)
    {   plus                            // don't need to do anything for '+expr'
    |   minus                           (.  prefixes.Push((false, UnaryOperator.UnaryNegation)); .)
    |   times                           (.  prefixes.Push((true, UnaryOperator.None)); .)
    |   inc                             (.  prefixes.Push((false, UnaryOperator.PreIncrement)); .)
    |   dec                             (.  prefixes.Push((false, UnaryOperator.PreDecrement)); .)
    |   deltaleft                       (.  prefixes.Push((false, UnaryOperator.PreDeltaLeft)); .)
    |   deltaright                      (.  prefixes.Push((false, UnaryOperator.PreDeltaRight)); .)
    }    
    Primary<out expr>                   
                                        (.  
                                            if(expr != null) {
                                                while(prefixes.Count > 0) {
                                                    var prefix = prefixes.Pop();
                                                    if(prefix.IsSplice) 
                                                        expr = Create.ArgumentSplice(position, expr);
                                                    else
                                                        expr = Create.UnaryOperation(position, prefix.Op, expr);
                                                }
                                            }
                                        .)
.

Primary<out AstExpr? expr>
                                        (.  expr = null;
                                        .)
=   IF(isLambdaExpression())
    LambdaExpression<out expr>
|	HashLiteral<out expr>
|   CoroutineCreation<out expr>
|	LoopExpr<out expr>
|   ThrowExpression<out var th>			(. expr = th; .)
|   LazyExpression<out expr>
|   PrimaryForGetSetComplex<out expr>
|   LPopExpr lpar Expr<out expr>        (.  //This is a hack that makes string interpolation with expressions possible
                                            //The non-verbal token "LPopExpr" (has no character representation) is 
                                            //returned by the lexer if the parser has to treat an expression in a special
                                            //way. This includes notifying the lexer when the expression has been parsed, as
                                            //well as injecting the necessary plus operator.
                                            _popLexerState(); _inject(_plus); .)
    rpar
.

// These are primary expressions that are suitable to use as the LHS of `LHS.method(call)` or `LHS[index]`.
PrimaryForGetSetComplex<out AstExpr expr>
                                        (. AstExpr? prim = null; .)
=(   Constant<out prim>
|   ThisExpression<out prim>
//  Note: the HashLiteral *cannot* appear here. A statement cannot start with an `{` because then it cannot be 
//  distinguished from a block.
|   ListLiteral<out prim>
|   IF(_isNotNewDecl()) ObjectCreation<out prim>
|   (.  _pushLexerState(Lexer.Asm); .)  (.  var blockExpr = Create.Block(GetPosition());
											_PushScope(blockExpr);
										.)
    asm lpar { AsmInstruction<blockExpr> } rpar
    (.  _popLexerState(); .)			(.  prim = blockExpr; 
											_PopScope(blockExpr);
										.)
|   GetInitiator<out prim>
)                                       (.  expr = prim ?? Create.Null(GetPosition()); .)
.

Constant<out AstExpr expr>
                                        (.  AstExpr? prim = null; int vi; double vr; bool vb; string vs; .)
=(
        Integer<out vi>                 (.  prim = new AstConstant(this, vi); .)
    |   Real<out vr>                    (.  prim = new AstConstant(this, vr); .)
    |   Boolean<out vb>                 (.  prim = new AstConstant(this, vb); .)
    |   String<out vs>                  (.  prim = new AstConstant(this, vs); .)
    |   Null							(.  prim = new AstConstant(this, null); .)
)                                       (.  expr = prim ?? Create.Null(GetPosition()); .).

ListLiteral<out AstExpr expr>
                                        (.  AstExpr iexpr; 
                                            AstListLiteral lst = new AstListLiteral(this);
                                            expr = lst;
                                            bool missingExpr = false;
                                        .)
=
    lbrack
    [   Expr<out iexpr>                 (.  lst.Elements.Add(iexpr); .)
        {   comma                       (.  if(missingExpr)
                                                Loader.ReportMessage(Message.Error(
                                                    "Missing expression in list literal (two consecutive commas).",
                                                    GetPosition(),
                                                    MessageClasses.DuplicateComma));
                                        .)
            (   Expr<out iexpr>         (.  lst.Elements.Add(iexpr); 
                                            missingExpr = false; 
                                        .)
            |                           (.  missingExpr = true; .)
            )
        }
    ]
    rbrack
.

HashLiteral<out AstExpr expr>
										(.	AstExpr iexpr; 
											AstHashLiteral hash = new AstHashLiteral(this);
											expr = hash;
                                            bool missingExpr = false;
										.)
=
	lbrace
	[	Expr<out iexpr>					(.	hash.Elements.Add(iexpr); .)
		{	comma                       (.  if(missingExpr)
                                                Loader.ReportMessage(Message.Error(
                                                    "Missing expression in list literal (two consecutive commas).", 
                                                    GetPosition(), 
                                                    MessageClasses.DuplicateComma));
                                        .)
            (   Expr<out iexpr>			(.	hash.Elements.Add(iexpr); 
                                            missingExpr = false;
                                        .)
            |                           (.  missingExpr = true; .)
            )
		}
	]
	rbrace
.

LoopExpr<out AstExpr expr>
										(.	var dummyBlock = Create.Block(GetPosition());
											_PushScope(dummyBlock);
											expr = _NullNode(GetPosition());
										.)
=
	(	WhileLoop<dummyBlock>
	|	ForLoop<dummyBlock>
	|	ForeachLoop<dummyBlock>
	)									(.	_PopScope(dummyBlock);
											Loader.ReportMessage(Message.Error(
											    "Loop expressions are no longer supported.",
											    GetPosition(),
											    MessageClasses.LoopExprNotSupported));
										.)
.										
											

ObjectCreation<out AstExpr expr>
                                        (.  AstGetSet? type;
                                        .)
=
    new TypeExpr<out type, _objectCreationShift>
                                        (.  type ??= _NullNode(GetPosition());
                                            expr = type;
                                        .)
    Arguments<type.Arguments>
.

CoroutineCreation<out AstExpr expr>
                                        (.  
                                            AstCreateCoroutine cor; 
                                            AstExpr iexpr;
                                        .)
=
    coroutine Expr<out iexpr>           (.   expr = cor = Create.CreateCoroutine(GetPosition(), iexpr); .)
    [ for Arguments<cor.Arguments> ]
.

LambdaExpression<out AstExpr expr>
                                        (.  PFunction func = TargetApplication.CreateFunction(generateLocalId());
		                                    ensureHasTarget();
                                            func.Meta[Application.ImportKey] = target.Function.Meta[Application.ImportKey];
                                            func.Meta[PFunction.ParentFunctionKey] = target.Function.Id;
                                            Loader.CreateFunctionTarget(func, target, GetPosition());
                                            CompilerTarget ft = FunctionTargets[func]!;
                                            ISourcePosition position;
                                        .)
=
                                        (.  position = GetPosition(); .)
(   FormalArg<ft>
|   lpar
    [	FormalArg<ft> 
	    {	comma
		    FormalArg<ft>
	    }
    ]
    rpar
)
                                        (.  _PushScope(ft); .)
implementation                                        
(   lbrace
    { Statement<ft.Ast> }
    rbrace
|                                       (.  AstReturn ret = new AstReturn(this, ReturnVariant.Exit); .)
    Expr<out ret.Expression>            (.  ft.Ast.Add(ret); .)
)
                                        (.
                                            _PopScope(ft);
                                            if(errors.count == 0)
                                            {
                                                try {
                                                    //Emit code for top-level block
                                                    Ast[func].EmitCode(ft,true,StackSemantics.Effect);
                                                    ft.FinishTarget();
                                                } catch(Exception e) {
                                                    Loader.ReportMessage(Message.Error($"Exception during compilation of lambda expression.\n{e}", GetPosition(), MessageClasses.ParserInternal));
                                                }
                                            }
                                            
                                            expr = Create.CreateClosure(position,EntityRef.Function.Create(func.Id,func.ParentApplication.Module.Name));
                                        .)
.

LazyExpression<out AstExpr expr>
                                        (.  PFunction func = TargetApplication.CreateFunction(generateLocalId());
		                                    ensureHasTarget();
                                            func.Meta[Application.ImportKey] = target.Function.Meta[Application.ImportKey];
                                            func.Meta[PFunction.ParentFunctionKey] = target.Function.Id;
                                            Loader.CreateFunctionTarget(func, target, GetPosition());
                                            CompilerTarget ft = FunctionTargets[func]!;
                                            ISourcePosition position;
                                            
                                            //Switch to nested target
                                            _PushScope(ft);
                                        .)
=                                       
lazy                                    (.  position = GetPosition(); .)
(   lbrace
    { Statement<ft.Ast> }
    rbrace
|                                       (.  AstReturn ret = new AstReturn(this, ReturnVariant.Exit); .)
    Expr<out ret.Expression>            (.  ft.Ast.Add(ret); .)
)                                       
                                        (.
                                            //Turn into capture by value
                                            var cap = ft._ToCaptureByValue(let_bindings(ft));
                                            
                                            //Restore parent target
                                            _PopScope(ft);
                                            
                                            //Finish nested function
                                            if(errors.count == 0)
                                            {
                                                try {
													Ast[func].EmitCode(ft,true,StackSemantics.Effect);
													ft.FinishTarget();
                                                } catch(Exception e) {
                                                    Loader.ReportMessage(Message.Error(
                                                        "Exception during compilation of lazy expression.\n" + e,
                                                        GetPosition(),
                                                        MessageClasses.ParserInternal));
                                                }
                                            }
                                            
                                            //Construct expr (appears in the place of lazy expression)
                                            var clo = Create.CreateClosure(position,EntityRef.Function.Create(func.Id,func.ParentApplication.Module.Name));
                                            var thunk = Create.IndirectCall(position,Create.Reference(position,EntityRef.Command.Create(Engine.ThunkAlias)));
                                            thunk.Arguments.Add(clo);
                                            thunk.Arguments.AddRange(cap(this)); //Add captured values
                                            expr = thunk;
                                        .)
.

ThrowExpression<out AstExpr th>        (. AstExpr expr; .)
=
    throw                               (.  var pos = GetPosition(); .) 
    Expr<out expr>                      (.  th = Create.Throw(pos, expr); .)
.

ThisExpression<out AstExpr expr>        (.  var position = GetPosition();
                                            expr = Create.IndirectCall(position,Create.Null(position));
                                        .)
=
    this                                (.  Loader.ReportMessage(Message.Error("Illegal use of reserved keyword `this`.",position,MessageClasses.ThisReserved)); .)
.

ExplicitTypeExpr<out AstGetSet? type, SymbolShift shift>
                                        (.  type = null; .)
=
    tilde PrexoniteTypeExpr<out type, shift>
|   ClrTypeExpr<out type, shift>
.

TypeExpr<out AstGetSet? type, SymbolShift shift>
                                        (.  type = null; .)
=
    PrexoniteTypeExpr<out type, shift>
|   ClrTypeExpr<out type, shift>
.

ClrTypeExpr<out AstGetSet type, SymbolShift shift>          
                                        (.  string id; ISourcePosition position = GetPosition(); .)
=
                                        (.  StringBuilder typeId = new StringBuilder(); .)
    (   doublecolon
    |   ns                              (.  typeId.Append(t.val); typeId.Append('.'); .)
    )
    {   ns                              (.  typeId.Append(t.val); typeId.Append('.'); .)
    }
    Id<out id>                          (.  typeId.Append(id);
                                            type = _useSymbol(Symbols, shift(ObjectPType.Literal), position);
                                            // arity of PType Object = 1
                                            type.Arguments.Add(Create.Constant(position, 1));
                                            // CLR type name
                                            type.Arguments.Add(Create.Constant(position, typeId.ToString()));
                                        .)
.

PrexoniteTypeExpr<out AstGetSet? type, SymbolShift shift>
                                        (.  AstGetSet? expr = null;
                                            string id = "<unknownId>";
                                            string shiftedId = "<unknownShiftedId>";
                                            ISourcePosition position;
                                            bool shiftUsed = false;
                                            ISourcePosition argPos;
                                        .)
=                                       (.  position = GetPosition(); .)
    ( Id<out id>                        (.  
                                            shiftedId = shift(id);
                                            if(Symbols.TryGet(shiftedId, out _)) 
                                            {
                                                expr = _useSymbol(Symbols, shiftedId, position); 
                                                shiftUsed = true;
                                            }
                                            else 
                                            {
                                                expr = _useSymbol(Symbols, id, position);
                                            }
                                        .)
      { IF(!shiftUsed && expr is AstNamespaceUsage ns)
                                        (.  position = GetPosition(); .)
        dot
        DotId<out id>                   (.
                                            shiftedId = shift(id);
                                            if(ns.Namespace.TryGet(shiftedId, out _)) 
                                            {
                                                expr = _useSymbolFromNamespace(ns, shiftedId, position);
                                                shiftUsed = true;
                                            }
                                            else 
                                            {
                                                expr = _useSymbolFromNamespace(ns, id, position);
                                            } 
                                        .)
      }
    | null                              (.  shiftedId = shift(NullPType.Literal);
                                            id = NullPType.Literal;
                                            expr = _useSymbol(Symbols, shiftedId, position);
                                            shiftUsed = true; 
                                        .)                          
    )
                                        (.  if(!shiftUsed) {
                                                Loader.ReportMessage(Message.Error(
                                                    string.Format("Cannot find {0} in scope.", shiftedId), 
                                                    position,
                                                    MessageClasses.ShiftedSymbolRequired));
                                                expr = _NullNode(position);
                                            }
                                            if(expr == null) {
                                                Loader.ReportMessage(Message.Error(
                                                "Internal parser error: expression in prexonite type expression should not be null.", 
                                                position, 
                                                MessageClasses.ParserInternal));
                                                expr = _NullNode(position);
                                            }
                                            argPos = GetPosition();
                                            var supportsTypeArguments = 
                                                BuiltInTypeCommandBase.SupportsTypeArguments(Loader, expr);
                                            var typeArgs = new List<AstExpr>();
                                        .)
    [   lt
        [                               (.  argPos = GetPosition(); .)
            TypeExprElement<typeArgs>   
            { comma TypeExprElement<typeArgs> }
        ]
        gt
    ]                                   (.  if(supportsTypeArguments) {
                                                expr.Arguments.Add(Create.Constant(argPos, typeArgs.Count));
                                                expr.Arguments.AddRange(typeArgs);
                                            }
                                            else if(typeArgs.Count > 0 && !supportsTypeArguments) {
                                                Loader.ReportMessage(Message.Error(
                                                    string.Format("The type {0} does not support type arguments.", id),
                                                    position,
                                                    MessageClasses.TypeArgumentsNotSupported
                                                ));
                                            }
                                            type = expr; 
                                        .)
.

TypeExprElement<. IList<AstExpr> args .>
                                        (.  AstExpr expr; .)
=
    Constant<out expr>                  (.  args.Add(expr); .)
|   lpar Expr<out expr> rpar            (.  args.Add(expr); .)
.