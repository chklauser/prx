/*
 * Prexonite, a scripting engine (Scripting Language -> Bytecode -> Virtual Machine)
 *  Copyright (C) 2007  Christian "SealedSun" Klauser
 *  E-mail  sealedsun a.t gmail d.ot com
 *  Web     http://www.sealedsun.ch/
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  Please contact me (sealedsun a.t gmail do.t com) if you need a different license.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

Id<out string id>               (.  id = "\\NoId\\"; .) //<-- should never surface. this is for debugging purposes
=
    GlobalId<out id>
|   (   enabled
    |   disabled
    |   build
    |   add
    )                           (.  id = cache(t.val); .)
.

// Id that immediately follows a dot; tolerate additional keywords used as identifiers (e.g., method names)
DotId<out string id>               (.  id = "\\NoId\\"; .) //<-- should never surface. this is for debugging purposes
=
    GlobalId<out id>
|   (   enabled
    |   disabled
    |   build
    |   add
    |   declare
    |   function
    |   command
    |   build
    |   ref
    |   var
    |   mod
    |   true
    |   false
    |   is
    |   as
    |   not
    |   asm
    |   return
    |   in
    |   to
    |   continue
    |   yield
    |   break
    |   or
    |   and
    |   xor
    |   static
    |   goto
    |   if
    |   unless
    |   else
    |   new
    |   coroutine
    |   from
    |   do
    |   does
    |   until
    |   while
    |   for
    |   foreach
    |   try
    |   catch
    |   try
    |   finally
    |   throw
    |   then
    |   uusing
    |   macro
    |   lazy
    |   let
    |   method
    |   this
    |   namespace
    |   export
    )                           (.  id = cache(t.val); .)
.

Boolean<out bool value>         (.  value = true; .)
=                   
	true          
|	false                       (.  value = false; .)
.

Integer<out int value>
=
	integer                     (.  if(!TryParseInteger(t.val, out value))
	                                    Loader.ReportMessage(Message.Error(
	                                        "Cannot recognize integer " + t.val, 
	                                        GetPosition(), 
	                                        MessageClasses.InvalidConstant));
	                            .)
.

SignedInteger<out int value>    (. int modifier = 1; .)
=
    [   plus
    |   minus                   (. modifier = -1; .)
    ]   Integer<out value>      (. value = modifier * value; .)
.

Real<out double value>  
=
	(real | realLike)           (.  string real = t.val;
	                                if(!TryParseReal(real, out value))
	                                    Loader.ReportMessage(Message.Error(
	                                        "Cannot recognize real " + real, 
	                                        GetPosition(), 
	                                        MessageClasses.InvalidConstant));
	                            .)
.

Version<out Version version>    // Cannot distinguish between Real and Version â†” must not appear in the same context.
=
    (realLike | version)        (.  var raw = t.val;
                                    if(TryParseVersion(raw, out var parsedVersion))
                                    {
                                        version = parsedVersion;
                                    }
                                    else
									{
                                        Loader.ReportMessage(Message.Error(
                                            "Cannot recognize version literal " + raw, 
                                            GetPosition(), 
                                            MessageClasses.InvalidConstant));
										version = new Version(0,0);
									}
                                .)
.

SignedReal<out double value>    (. value = 0.0; double modifier = 1.0; int ival; .)
=
    [   plus
    |   minus                   (. modifier = -1.0; .)
    ]   ( Real<out value> 
        | Integer<out ival>     (. value = ival; .)
        )
                                (. value = modifier * value; .)
.

String<out string value>
=
    string                      (. value = cache(t.val); .)
.

Null = null .

MId<out String id>	            (.  id = "an\\invalid\\MId"; .)			
=
(	var
|   ref
|   true
|	false
|   mod
|	is
|	as
|	not
|	function
|	command	
|	asm	
|	declare
|	build
|	return
|	in
|	to
|	continue
|	break
|	yield
|	or
|	and
|	xor
|	label
|	goto
|	static	// null is not a valid MExpr id. It is used to represent an MAtom with a null value
|	if
|	unless
|	else
|	new
|	coroutine
|	from
|	do
|	does
|	while
|	until
|	for
|	foreach
|	try
|	catch
|	finally
|	throw
|	then
|	uusing //Coco/R does not accept "using" as a token name.
|	macro
|	lazy
|	let
|	method
|	this
|	bitAnd
|	pow
|	times
|	tilde
|	question
|	pointer
|	at
|	colon
|	implementation
)								(.	id = cache(t.val); .)
|	Id<out id>
.

MExpr<out MExpr expr>			(.  expr = new MExpr.MAtom(NoSourcePosition.Instance,null);
                                    bool lastWasComma = false;
                                .)
=								(.	String id; 
									var args = new List<MExpr>();
									MExpr arg;
								.)
	MId<out id>
	(	lpar					
		[	MExpr<out arg>		(.	args.Add(arg); .)
			{	comma           (.  if(lastWasComma)
                                    {
                                        Loader.ReportMessage(Message.Error("Double comma in MExpr list.",GetPosition(),MessageClasses.DuplicateComma));
                                    }
                                    lastWasComma = true; 
                                .)
				[   MExpr<out arg>	
                                (.	args.Add(arg); 
                                    lastWasComma = false;
                                .)
                ]
			}
		]
		rpar
	|	MExpr<out arg>			(.	args.Add(arg); .)
	|							(.	/* no M-Expr args */ .)
	)							(.	expr = new MExpr.MList(GetPosition(), id,args); .)
|								(.  String value; .)
	String<out value>			(.	expr = new MExpr.MAtom(GetPosition(), value); .)
|								(.	int intval; .)
	SignedInteger<out intval>	(.	expr = new MExpr.MAtom(GetPosition(), intval); .)
|								(.	bool boolval; .)
	Boolean<out boolval>		(.	expr = new MExpr.MAtom(GetPosition(), boolval); .)
|                               (.  Version v; .)
    Version<out v>              (.  expr = new MExpr.MAtom(GetPosition(), v); .)
|	
    Null                        (.  expr = new MExpr.MAtom(GetPosition(), null); .)
.