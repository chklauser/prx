/*
 * Prexonite, a scripting engine (Scripting Language -> Bytecode -> Virtual Machine)
 *  Copyright (C) 2007  Christian "SealedSun" Klauser
 *  E-mail  sealedsun a.t gmail d.ot com
 *  Web     http://www.sealedsun.ch/
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  Please contact me (sealedsun a.t gmail do.t com) if you need a different license.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

StatementBlock<AstBlock block>
=
	Statement<block>
.

Statement<AstBlock block>
=
(   IF( isLabel() )
		ExplicitLabel<block>
	|   IF( isAsmBlock() ) StructureStatement<block>
	|   [ SimpleStatement<block> ] semicolon
	|   StructureStatement<block>
)
{	and Statement<block> 
}
.

SimpleStatement<AstBlock block>
=
	ExplicitGoTo<block>
|   GetSetComplex<block>
|   Return<block>
|   Throw<block>
|   LetBindingStmt<block>
.

StructureStatement<AstBlock block>
=
    (.  _pushLexerState(Lexer.Asm); .)
    asm AsmStatementBlock<block>
    (.  _popLexerState(); .)
|   Condition<block>
|   Declaration2
|   WhileLoop<block>
|   ForLoop<block>
|   ForeachLoop<block>
|   NestedFunction<block>
|   TryCatchFinally<block>
|   Using<block>
|	lbrace
	{
		Statement<block>
	}
	rbrace
.

GetSetComplex<AstBlock block>
                                        (.  AstGetSet complex; 
                                            AstExpr expr;
                                            AstNode node;
                                        .)
=
//GetSet Initiator
PrimaryForGetSetComplex<out expr>       (.  complex = expr as AstGetSet; .)

//GetSet Extensions
{   GetSetExtension<expr, out complex>  (.  expr = complex; .)
}
//GetSet Terminator
(                                       (.  if(expr != null) // Happens in case of an error
                                                block.Add(expr); 
                                        .)
|                                       (.  var pos = GetPosition(); 
                                            if(complex == null)
                                            {                                                
                                                Loader.ReportMessage(Message.Error("Expected an LValue (Get/Set-Complex) for ++,-- or assignment statement.",pos,MessageClasses.LValueExpected));
                                                complex = Create.IndirectCall(pos,Create.Null(pos));
                                            }                                            
                                        .)
    (   inc                             (.  block.Add(Create.UnaryOperation(pos, UnaryOperator.PostIncrement, complex)); .)
    |   dec                             (.  block.Add(Create.UnaryOperation(pos, UnaryOperator.PostDecrement, complex)); .)
    |   Assignment<complex, out node>   (.  if(complex == null && node == null)
                                            {
                                                // An error ocurred during parsing prior to this point.
                                                // Don't add the null node to the block to avoid a ArgumentNullException
                                            }
                                            else if(node == null)
                                            {
                                                Loader.ReportMessage(Message.Error("Internal error during translation of assignment. This is likely caused by an error reported previously.",GetPosition(),MessageClasses.ParserInternal));
                                            }
                                            else
                                            {
                                                block.Add(node);
                                            }
                                        .)
    |	AppendRightTermination<ref complex>
	    {	AppendRightTermination<ref complex>
	    }
										(.	block.Add(complex);  .)  
    )
)
.

AppendRightTermination<ref AstGetSet complex>
		                                (.	AstGetSet rhs; .)
=
	appendright
	GetCall<out rhs>                    (.	_appendRight(complex,rhs);
										    complex = rhs;
										.)
.

GetSetExtension<AstExpr subject, out AstGetSet extension>
                                        (.  extension = null; string id;
											if(subject == null)
											{
												SemErr("Member access not preceded by a proper expression.");
												subject = new AstConstant(this,null);
											}
                                        .)
                                        
=
    IF( isIndirectCall() )
    dot                                 (.  extension = new AstIndirectCall(this, PCall.Get, subject); .)
    Arguments<extension.Arguments>
|   dot
    DotId<out id>                          (.  var ns = subject as AstNamespaceUsage;
                                            if(ns == null)
                                            {
                                                // Ordinary member access
                                                extension = new AstGetSetMemberAccess(this, PCall.Get, subject, id);
                                            }
                                            else
                                            {
                                                // Namespace lookup
                                                extension = _useSymbolFromNamespace(ns, id, GetPosition());
                                            }
                                        .)
    Arguments<extension.Arguments> 
|                                       (.  
                                            AstExpr expr; 
                                            extension = new AstGetSetMemberAccess(this, PCall.Get, subject, ""); 
                                        .)
    lbrack [
            Expr<out expr>              (.  extension.Arguments.Add(expr); .)  
            { WEAK comma Expr<out expr>   (.  extension.Arguments.Add(expr); .)
            }
        ]                                             
    rbrack                                                                      
.

GetInitiator<out AstExpr complex>
                                        (.  complex = null; 
                                            AstGetSet actualComplex = null;
                                            AstGetSet staticCall = null;
                                            AstGetSet member = null;
                                            AstExpr expr;
                                            List<AstExpr> args = new List<AstExpr>();
                                            string id;
                                            int placeholderIndex = -1;
                                        .)
=
    //Actual value
    (   SymbolicUsage<out actualComplex>
                                        (.  complex = actualComplex; .)
    |   VariableDeclaration<out actualComplex>
                                        (.  complex = actualComplex; .)
    |   StaticCall<out staticCall>
    |	lpar Expr<out expr>				(.	args.Add(expr); .)
		{	comma Expr<out expr>		(.	args.Add(expr); .) //multiple expressions can only be used as arguments
		}
		rpar
		(	GetSetExtension<expr, out member>
										(.	if(args.Count > 1)
												SemErr("A member access cannot have multiple subjects. (Did you mean '>>'?)");
										.)
		|	appendright
			GetCall<out actualComplex>  (.  _appendRight(args,actualComplex);
                                            complex = actualComplex;
										.)
		)
    )
                                        (.  complex =  
												staticCall ?? 
												member ??
												complex; 
										.)
    //Reference
|   pointer                             (.  var ptrCount = 1; .)
    {   pointer                         (.  ptrCount++; .)
    }
    Id<out id>                          (.  complex = _assembleReference(id, ptrCount); .)
|   question
    [   Integer<out placeholderIndex> ] (.  complex = new AstPlaceholder(this, 0 <= placeholderIndex ? (int?)placeholderIndex : null); .)
.

VariableDeclaration<out AstGetSet complex>
                                (.  string id, physicalId;
                                    bool isOverrideDecl = false;
                                    bool seenVar = false;
                                    int refCount = 1;
                                    bool isUnbound = false;
                                    bool isStatic = false;
                                    Symbol sym, varSym;
                                .)
=
[   new                         (.  isUnbound = true; .)
]
(       static                  (.  isStatic = true; .)
        {   ref                 (.  refCount++; .)
        }
        [   var     ]
    |   (   var                 (.  seenVar = true; .)
        |    ref                (.  refCount++; .)
        )
        {   (   var             (.  if(seenVar)
                                    {
                                        Loader.ReportMessage(Message.Error("Duplicate ocurrence of `var` in local variable declaration.",GetPosition(),MessageClasses.DuplicateVar));
                                        // This is just a stylistic rule. There are no consequences to having duplicate `var` keywords in a declaration.
                                    }
                                    seenVar = true;
                                .)
            |   ref             (.  refCount++; .)
            )
        }
)
    [   new                     (.  isOverrideDecl = true; .)
    ]                           (.  ISourcePosition position = GetPosition(); .)
    Id<out id>                  (.  physicalId = id;
                                    if(isStatic)
                                    {
                                        physicalId = target.Function.Id + "\\static\\" + id;
                                        VariableDeclaration vari;
                                        if(isOverrideDecl)
                                        {
                                            if(TargetModule.Variables.Contains(physicalId))
                                                physicalId = target.GenerateLocalId(physicalId);
                                        }

                                        DefineGlobalVariable(physicalId, out vari);
                                        varSym = Symbol.CreateReference(EntityRef.Variable.Global.Create(physicalId,TargetModule.Name),position);

                                        if(isUnbound)
                                        {
                                            Loader.ReportMessage(Message.Error("Unbinding of global (or static) variables is not currently supported.",position,MessageClasses.GlobalUnbindNotSupported));
                                            isUnbound = false;
                                        }
                                    }
                                    else
                                    {
                                        if(isOverrideDecl)
                                        {
                                            if(target.Function.Variables.Contains(physicalId))
                                                physicalId = target.GenerateLocalId(physicalId);
                                            target.Function.Variables.Add(physicalId);
                                        }
                                        else if(!isOuterVariable(physicalId))
                                        {
                                            target.Function.Variables.Add(physicalId);
                                        }

                                        varSym = Symbol.CreateReference(EntityRef.Variable.Local.Create(physicalId),position);
                                        // Create.ExprFor will request outer variables where necessary.
                                    }

                                    // Apply ref's (one ref is implied, see initialization of refCount)
                                    //  Note: we retain the original symbol to generate the AST node
                                    sym = varSym;
                                    while(refCount-- > 0)
                                        sym = Symbol.CreateDereference(sym);
                                    
                                    // Declare the symbol in the current scope and assemble an AST node
                                    Symbols.Declare(id,sym);
                                    complex = Create.ExprFor(position, Symbol.CreateDereference(varSym)) as AstGetSet;

                                    if(complex == null)
                                    {
                                        Loader.ReportMessage(Message.Error("Expected variable declaration to result in LValue.",position,MessageClasses.LValueExpected));
                                        complex = Create.IndirectCall(position,Create.Null(position));
                                    }
                                    else if(isUnbound)
                                    {
                                        // Wrap variable access in NewDecl
                                        var newDecl = new AstGetSetNewDecl(position,physicalId,complex);
                                        complex = newDecl;
                                    }
                                .)
.

SymbolicUsage<out AstGetSet complex>
                                (.  string id; ISourcePosition position; 
                                .)
=                               (.  position = GetPosition(); .)
    Id<out id>                  (.  complex = _useSymbol(Symbols, id, position); .)
    Arguments<complex.Arguments>    
.

StaticCall<out AstGetSet staticCall>
                                (.  string memberId;
                                    ISourcePosition idPosition;
                                .)
=
    ExplicitTypeExpr<out staticCall, _staticCallShift>
    dot                         (. idPosition = GetPosition(); .)
    DotId<out memberId>         (.  staticCall.Arguments.Add(Create.Constant(idPosition, memberId)); .)
    Arguments<staticCall.Arguments>
.
                                    //Fallback in case of a syntax error to avoid NullReferenceExceptions
ExplicitLabel<AstBlock block>   (.  string id = "--\\NotAnId\\--"; .)
=
    (   Id<out id> colon
    |   lid                     (.  id = cache(t.val.Substring(0,t.val.Length-1)); .)
    )                           (.  block.Statements.Add(new AstExplicitLabel(this, id)); .)
.

ExplicitGoTo<AstBlock block>    (.  string id; .)
=
    goto
    Id<out id>                  (.  block.Statements.Add(new AstExplicitGoTo(this, id)); .)
.

Assignment<AstGetSet lvalue, out AstNode node>
                                (.  AstExpr expr = null;
									BinaryOperator setModifier = BinaryOperator.None;
									AstGetSet typeExpr;
									node = lvalue;
                                    ISourcePosition position;
								.)
=                               (.  position = GetPosition(); .)
(                               
	(   ( assign )              (.  setModifier = BinaryOperator.None; .)
	|   plus assign             (.  setModifier = BinaryOperator.Addition; .)
	|   minus assign            (.  setModifier = BinaryOperator.Subtraction; .)
	|   times assign            (.  setModifier = BinaryOperator.Multiply; .)
	|   div assign              (.  setModifier = BinaryOperator.Division; .)
	|   bitAnd assign           (.  setModifier = BinaryOperator.BitwiseAnd; .)
	|   bitOr assign            (.  setModifier = BinaryOperator.BitwiseOr; .)
	|	coalescence assign      (.	setModifier = BinaryOperator.Coalescence; .)
	)   Expr<out expr>        //(.	expr = expr; .)
	
|	tilde assign                (.	setModifier = BinaryOperator.Cast; .)
	TypeExpr<out typeExpr, _conversionShift>  
	                            (.  expr = typeExpr; .)
)								
								(.  if(expr == null)
                                    {
                                        Loader.ReportMessage(Message.Error("Internal error during translation of assignment. This is likely caused by an error reported previously.",GetPosition(),MessageClasses.ParserInternal));
                                    }
                                    else
                                    {
                                        lvalue.Arguments.Add(expr);
                                    }
									lvalue.Call = PCall.Set; 
									if(setModifier != BinaryOperator.None)
									    node = Create.ModifyingAssignment(position,lvalue,setModifier);
								.)
.

Condition<AstBlock block>
                                (. AstExpr expr; bool isNegative = false; .)
=
    (   if                      (.  /* isNegative is already false */ .)
    |   unless                  (.  isNegative = true; .)
    )
    
    lpar Expr<out expr> rpar    (.  if(expr == null)
                                        expr = _createUnknownExpr();
                                    AstCondition cond = Create.Condition(GetPosition(), expr, isNegative);
                                    _PushScope(cond.IfBlock);
                                .)
    
    StatementBlock<cond.IfBlock> 
                                (.  _PopScope(cond.IfBlock); .)

    
    [   else                    (.  _PushScope(cond.ElseBlock); .)
        StatementBlock<cond.ElseBlock> 
                                (.  _PopScope(cond.ElseBlock); .)
    ]                           (.  block.Add(cond); .)
.

WhileLoop<AstBlock block>
                                (.  AstWhileLoop loop = new AstWhileLoop(GetPosition(),CurrentBlock); .)
=
(   (   while  | until          (.  loop.IsPositive = false; .)    
    )                           
    lpar Expr<out loop.Condition> rpar
                                (.  _PushScope(loop.Block); //EndBlock is common for both loops
                                .)
    StatementBlock<loop.Block> 
    
|   do                          (.  _PushScope(loop.Block); 
                                    loop.IsPrecondition = false;
                                .)
    StatementBlock<loop.Block>
    (   while  | until          (.  loop.IsPositive = false; .)    
    )                           
    lpar Expr<out loop.Condition> rpar
)                               (.  _PopScope(loop.Block); block.Add(loop); .)
.

ForLoop<AstBlock block>         (.  AstForLoop loop;
									AstExpr condition;
                                .)
=
    for                         (.  loop = new AstForLoop(GetPosition(), CurrentBlock); 
									_PushScope(loop.Initialize);
								.)
    lpar StatementBlock<loop.Initialize>
    (							(.	
									_PushScope(loop.NextIteration); 
								.)
		do StatementBlock<loop.NextIteration> 
                                (.  loop.IsPrecondition = false; .)
        (   while
        |   until               (.  loop.IsPositive = false; .)
        )						(.  _PopScope(loop.NextIteration); .)
        Expr<out condition>		(.	loop.Condition = condition; 
									_PushScope(loop.NextIteration);
								.)
    |   [   while
        |   until               (.  loop.IsPositive = false; .)
        ]       
        Expr<out condition>		(.	loop.Condition = condition; .)
        semicolon				(.	_PushScope(loop.NextIteration); .)
        SimpleStatement<loop.NextIteration>
        [ semicolon ]
    )							
    rpar						(.  _PushScope(loop.Block); .)
    StatementBlock<loop.Block>  (.  _PopScope(loop.Block);
									_PopScope(loop.NextIteration);
									_PopScope(loop.Initialize);
									block.Add(loop);
								.)
.

ForeachLoop<AstBlock block>
=
    foreach                      (.  AstForeachLoop loop = Create.ForeachLoop(GetPosition());
                                     _PushScope(loop.Block);
                                 .)
    lpar
    GetCall<out loop.Element> 
    in 
    Expr<out loop.List> 
    rpar
    StatementBlock<loop.Block>
                                (.  _PopScope(loop.Block);
                                    block.Add(loop); 
                                .) 
.

GetCall<out AstGetSet complex>  // This is used in placed where an LValue is expected
                                // as the name of this production so helpfully suggests ;-)
                                // Thus checking for LValue-ness is required and expected.
                                (.  AstGetSet getMember = null; 
                                    AstExpr expr;
                                .)
=
    GetInitiator<out expr>
                                (.  complex = expr as AstGetSet;
                                    if(complex == null)
                                    {
                                        var pos = GetPosition();
                                        Loader.ReportMessage(Message.Error("Expected an LValue (Get/Set-Complex) for ++,-- or assignment statement.",pos,MessageClasses.LValueExpected));
                                        complex = Create.IndirectCall(pos,Create.Null(pos));
                                    }  
                                .)
    { GetSetExtension<complex, out getMember> 
                                (.  complex = getMember; .)
    }
.

Return<AstBlock block>          (.  AstReturn ret = null; 
                                    AstExplicitGoTo jump = null; 
                                    AstExpr expr; 
                                    AstLoopBlock bl = target.CurrentLoopBlock;
                                .)
=
(   
    (
        return                  (.  ret = new AstReturn(this, ReturnVariant.Exit); .)
    |   yield                   (.  ret = new AstReturn(this, ReturnVariant.Continue); .)
    )
    [   Expr<out expr>          (.  ret.Expression = expr; .)
    |   assign                  (.  ret.ReturnVariant = ReturnVariant.Set; .)
        Expr<out expr>          (.  ret.Expression = expr; .)
                                (.  SemErr("Return value assignment is no longer supported. You must use local variables instead."); .)
    ]
|   break                       (.  if(bl == null)
                                        ret = new AstReturn(this, ReturnVariant.Break); 
                                    else
                                        jump = new AstExplicitGoTo(this, bl.BreakLabel);
                                .)
|   continue                    (.  if(bl == null)
                                        ret = new AstReturn(this, ReturnVariant.Continue); 
                                    else
                                        jump = new AstExplicitGoTo(this, bl.ContinueLabel);
                                .)
)                               (.  block.Add((AstNode)ret ?? jump); .)
.

NestedFunction<AstBlock block>
                                (.  PFunction func; .)
=
    FunctionDefinition<out func>
                                (.  
                                    string logicalId = func.Meta[PFunction.LogicalIdKey];
                                    func.Meta[PFunction.ParentFunctionKey] = target.Function.Id;
                                    
                                    CompilerTarget ft = FunctionTargets[func];
                                    var pos = GetPosition();
                                    var setVar = Create.IndirectCall(pos,Create.Reference(pos,EntityRef.Variable.Local.Create(logicalId)),PCall.Set);
                                    if(func.Meta[PFunction.LazyKey].Switch)
                                    {
                                        //Capture environment by value                                        
                                        var ps = ft._ToCaptureByValue(let_bindings(ft));
                                        ft._DetermineSharedNames(); //Need to re-determine shared names since
                                                                    // _ToCaptureByValue does not automatically modify shared names
                                        var clos = Create.CreateClosure(pos,  EntityRef.Function.Create(func.Id, 
                                                func.ParentApplication.Module.Name));
                                        var callStub = Create.IndirectCall(pos, clos);
                                        callStub.Arguments.AddRange(ps(this));
                                        setVar.Arguments.Add(callStub);
                                    }
                                    else if(ft.OuterVariables.Count > 0)
                                    {                                        
                                        setVar.Arguments.Add( Create.CreateClosure(GetPosition(),  EntityRef.Function.Create(func.Id, 
                                                func.ParentApplication.Module.Name)) );                                        
                                    }
                                    else
                                    {
                                        setVar.Arguments.Add( new AstReference(GetPosition(), EntityRef.Function.Create(func.Id,func.ParentApplication.Module.Name)) );
                                    }
                                    block.Add(setVar);
                                .)
.

LetBindingStmt<AstBlock block>
=
    let LetBinder<block> { comma LetBinder<block> }
.

LetBinder<AstBlock block>
                                (.  string id = null;
                                    AstExpr thunk;
                                .)
=                               (.  var position = GetPosition(); .)
    Id<out id>                  (.  //Declare local "let" variable
                                    _ensureDefinedLocal(id,id,false,position,false);
                                    mark_as_let(target.Function, id);
                                    if(la.kind == _assign)
                                        _inject(_lazy,"lazy"); 
                                .)
    [   assign                      
        LazyExpression<out thunk>   
                                (.  
                                    //Assign thunk to that variable
                                    var assign = Create.Call(position, EntityRef.Variable.Local.Create(id), PCall.Set);
                                    assign.Arguments.Add(thunk);
                                    block.Add(assign);
                                .)
    ]
.

TryCatchFinally<AstBlock block>
                                (.  var a = Create.TryCatchFinally(GetPosition());
                                    AstGetSet excVar;
                                .)
=
    try                         (.  _PushScope(a);
									_PushScope(a.TryBlock); 
								.)
    lbrace
    {   Statement<a.TryBlock>
    }
    rbrace                      (. /* Don't pop try-block scope here. */ .)
    [	catch                   (. _PushScope(a.CatchBlock); .)
		(   lpar
			GetCall<out excVar> (. a.ExceptionVar = excVar; .)
			rpar
	    |                       (.  SemErr(la,"catch-clauses that don't store the exception are illegal."); .)
		)
		lbrace
		{   Statement<a.CatchBlock>
		}
		rbrace		            (. _PopScope(a.CatchBlock);.)
	    
		[
			finally             (.  _PushScope(a.FinallyBlock); .)
			lbrace
			{   Statement<a.FinallyBlock>
			}
			rbrace              (.  _PopScope(a.FinallyBlock); .)
		]
		
	|	finally                 (.  _PushScope(a.FinallyBlock); .)
		lbrace
		{   Statement<a.FinallyBlock>
		}
		rbrace                  (.  _PopScope(a.FinallyBlock); .)
		
		[	                    (.  _PushScope(a.CatchBlock); .)
		    catch
			(   lpar
				GetCall<out excVar>
                                (. a.ExceptionVar = excVar; .)
				rpar
			|                   (.  SemErr(la,"catch-clauses that don't store the exception are illegal."); .)
			)
			lbrace
			{   Statement<a.CatchBlock>
			}
			rbrace
			                    (.  _PopScope(a.CatchBlock); .)
		]
	]                       
                                (.  _PopScope(a.TryBlock);
									_PopScope(a);
									block.Add(a); 
								.)
.

Throw<AstBlock block>
                                (.  AstThrow th; .)
=
	ThrowExpression<out th>
                                (.  block.Add(th); .)
.                                

Using<AstBlock block>
                                (.  AstUsing use = Create.Using(GetPosition());
									AstExpr e;
								.)
=
								(.  _PushScope(use);
									_PushScope(use.Block); .)
    uusing lpar Expr<out e> rpar
								(.	use.ResourceExpression = e; .)
                                
    StatementBlock<use.Block>
                                (.  _PopScope(use.Block);
									_PopScope(use);
                                    block.Add(use); 
                                .)
.

Arguments<ArgumentsProxy args>
                                (.  
									AstExpr expr;
                                    bool missingArg = false;
                                .)
=
	[
		lpar
		[	Expr<out expr>      (.  args.Add(expr); .)
			{	comma           (.  if(missingArg)
                                        SemErr("Missing argument expression (two consecutive commas)");
                                .)
				(   Expr<out expr>  
                                (.  args.Add(expr);
                                    missingArg = false;
                                .)
                |               (.  missingArg = true; .)
                )
			}
		]
		rpar
	]
								(.	args.RememberRightAppendPosition(); .)
	[
		appendleft
		(
			IF(la.kind == _lpar && (!isLambdaExpression()))
			lpar
			[	Expr<out expr>	(.  args.Add(expr); .)
				{	comma
					Expr<out expr>	
								(.  args.Add(expr); .)
				}
			]
			rpar
		|	Expr<out expr>		(.  args.Add(expr); .)
		)
	]
.