// Prexonite
//
// Copyright (c) 2014, Christian Klauser
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification,
//  are permitted provided that the following conditions are met:
//
//     Redistributions of source code must retain the above copyright notice,
//          this list of conditions and the following disclaimer.
//     Redistributions in binary form must reproduce the above copyright notice,
//          this list of conditions and the following disclaimer in the
//          documentation and/or other materials provided with the distribution.
//     The names of the contributors may be used to endorse or
//          promote products derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
//  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


//Provides compiler support for properties via compiler hooks
//  Simple:
//      function Amount = prop;
//
//  Proxy:
//      function Amount = prop(Something.Amount);
//
//  Complex:
//      function Amount = prop(
//          () => Something.GetAmount,
//          newAmount => Something.SetAmount(newAmount)
//      );

function prop\meta_entry = "psr\\prop";

macro prop\macro\assemble(dummyArgs,prop_get,prop_set)
[
    Import
    {
        System,
        Prexonite,
        Prexonite::Types,
        Prexonite::Compiler,
        Prexonite::Compiler::Ast
    };
]
{
    if(not ast_is_GetSet(prop_set))
    {
        macro\report_error(
            "auto-properties (psr\\prop.pxs) requires the node prop_set=$(boxed(prop_set)) to be a GetSet complex.");
        return;
    }

    if(not ast_is_Expression(prop_get))
    {
        macro\report_error("auto-properties (psr\\prop.pxs) requires the node prop_get=$(boxed(prop_get)) to be an expression node.");
        return;
    }

    dummyArgs = ast\read(dummyArgs)~Int;
    var parameters = context.Function.Parameters;
    while(parameters.Count <= dummyArgs)
        parameters.Add(uniqueId("arg"));

    var prop_arg = ast\lvar(parameters[dummyArgs]);

    var nullCheck = ast3("Typecheck",prop_arg,ast("ConstantTypeExpression",::NullPType.Literal));
    var varargsId = ::PFunction.ArgumentListId;
    var getArgs = ast\lvar(varargsId);
    if(not context.Function.Variables.Contains(varargsId))
        context.Function.Variables.Add(varargsId);
    var getArgc = ast\member(getArgs,"Count");
    var cmpEqZero = ast3("BinaryOperation",getArgc,::BinaryOperator.Equality,ast\const(0));
    var conj = ast("LogicalAnd",nullCheck,cmpEqZero);
    var check = ast("ConditionalExpression",conj);

    prop_set.Arguments.Add(prop_arg);

    //println("prop\\macro\\assemble($dummyArgs,$prop_get,$prop_set)");
    check.IfExpression = prop_get;
    check.ElseExpression = prop_set;

    context.Block.Expression = check;

    return null;
}

macro prop\macro\simple(dummyArgs)
{

    var backingField;
    var storeId = uniqueId("$(context.Function.Id)_prop_store");
    if((context.GetParentFunctions >> limit(1) >> count) > 0)
    {
        //is nested function ↔ define variable in parent function
        var parentFunc = (context.GetParentFunctions >> limit(1) >> all)[0];
        parentFunc.Variables.Add(storeId);
        context.RequireOuterVariable(storeId);
        backingField = ast\lvar(storeId);
    }
    else
    {
        //is global function ↔ define global variable
        context.Application.Module.Variables.Add(var storeDecl = Prexonite::Modular::VariableDeclaration.Create(storeId));
        context.Application.Variables.Add(storeId,new Prexonite::PVariable(storeDecl));
        backingField = ast\call(SI.e.gvar(storeId,context.Application.Module.Name));
    }

    var prop_get = backingField;
    var prop_set = backingField.GetCopy;
    prop_set.Call = SI.set;

    context.Block.Expression = var invk = ast\expand_macro(entityref_to(prop\macro\assemble));
    invk.Arguments.Add(dummyArgs);
    invk.Arguments.Add(prop_get);
    invk.Arguments.Add(prop_set);

    return null;
}

macro prop\macro\complex(dummyArgs,getter,setter)
{
    context.Block.Expression = var invk = ast\expand_macro(entityref_to(prop\macro\assemble));
    (var iargs = invk.Arguments).Add(dummyArgs);
    iargs.Add(ast("IndirectCall",SI.get,getter));
    iargs.Add(ast("IndirectCall",SI.set,setter));

    return null;
}

macro prop\macro\proxy(dummyArgs,prop_get)
{
    if(not ast_is_GetSet(prop_get))
    {
        macro\report_error("The target of a proxy property must be a GetSet node.");
        return;
    }

    //println("prop\\macro\\proxy($dummyArgs,$prop_get)");
    var prop_set = prop_get.GetCopy();
    prop_set.Call = SI.set;

    context.Block.Expression = var invk = ast\expand_macro(entityref_to(prop\macro\assemble));
    invk.Arguments.Add(dummyArgs);
    invk.Arguments.Add(prop_get);
    invk.Arguments.Add(prop_set);

    return null;
}

/// prop\macro(dummyArgs) expands into a property with getter and setter code
/// (depending on the number of arguments passed to the surrounding function)
/// @param dummyArgs indicates the number of paramters the property has, e.g.
///     for struct properties, dummyArgs=1 because technically you'll have my_prop(this, newValue)
macro prop\macro(dummayArgs)[
    Import
    {
        System,
        Prexonite,
        Prexonite::Types,
        Prexonite::Compiler,
        Prexonite::Compiler::Ast
    }
]
{
    if(context.IsJustEffect or not SI.eq(context.Call,SI.get))
    {
        macro\report_error("auto-property (psr\\prop.pxs) must be used as a RHS. Its value must not be ignored.");
        return;
    }

    if(context.Function.Meta[prop\meta_entry].Switch)
    {
        macro\report_error("auto-property (psr\\prop.pxs) can only be used once per function.");
        return;
    }
    context.Function.Meta[prop\meta_entry] = true;

    var argc = var args.Count;
    if(argc == 0)
    {
        macro\report_error("$(macro\internal_id(prop\macro))(dummyArgs) requires at least one argument.");
        return;
    }

    context.Block.Expression =
        if(argc == 1)
            call\macro([prop\macro\simple,context.IsJustEffect,context.Call],args)
        else if(argc == 2)
            call\macro([prop\macro\proxy,context.IsJustEffect,context.Call],args)
        else
            call\macro([prop\macro\complex,context.IsJustEffect,context.Call],args)
    ;

    return null;
}

macro prop
{
    context.Block.Expression = var invk = ast\expand_macro(entityref_to(prop\macro));
    invk.Arguments.Add(ast\const(0));
    invk.Arguments.AddRange(var args);
    return null;
}

macro struct_prop
{
    context.Block.Expression = var invk = ast\expand_macro(entityref_to(prop\macro));
    invk.Arguments.Add(ast\const(1));
    invk.Arguments.AddRange(var args);
    return null;
}