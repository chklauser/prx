build
{
    require("resource:Prx:prx_lib.pxs");
}

Import { System, System::Text, Prexonite, Prexonite::Compiler };

namespace prx.cli
{
    declare var app;
    declare var engine;
    declare var ldr;
    declare function reboot;
}

namespace prx.cli.repl
    import 
        sys.*,
        sys.seq.*,
        prx.cli.*
{
    // If you are only interested in learning how prx_main.pxs works, you can stop reading here ;-)
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    var evalStep = 1; //<-- helps to make identifiers unique

    coroutine tabHook(prefix, root)
    {
        //User supplied entries
        foreach(var e in app.Meta["Tab"].List)
            if(e.Text.Length > 0)
                yield e.Text;

        var hideKeys = [ "hidden", "private" ];
        function isHidden(func)
        {
            if(func is Null)
                return true;
                
            foreach(var hideKey in hideKeys)
                if(func.Meta[hideKey].Switch)
                    return true;
            
            return false;   
        }
        
        //Add hide keys defined by the user
        foreach(var key in app.Meta["hideKeys"].List)
            if(key.Text.Length > 0)
                hideKeys[] = key.Text;
        
        //Add symbols (the declarations, not the physical names)
        foreach(var symbol in ldr.Symbols)
            yield symbol.key;
        
        //A collection of common usages
        yield "ToString";
        yield "foreach";
        yield "function";
        yield "StringBuilder";
        yield "System";
        yield "Text";
        yield "Prexonite";
        yield "Null";
        yield "String";
        yield "List";
        yield "Hash";
        yield "Int";
        yield "Real";
        yield "Bool";
        yield "Structure";
    }

    function prx\interactive()
    {
        if(supportsTabs)
            host.console.Tab = ->tabHook;
        
        print(
            "Entering Prexonite INTERACTIVE MODE.\n", 
            "Type :quit to quit.\n",
            "\"<stmt>\" executes a statement.\n",
            "\"=<expr>\" evaluates an expression.\n", 
            "\":<GlobalStatement>\" or \"global <GlobalStatement>\" inserts global code.\n",
            "\"import <Namespace>.*\" extends namesapce imports for this session.\n",
            "\"import clear\" restores default namespace imports.\n"
        );
        
        //Either create a new application or use the one compiled in 'prx\main'.
        if(app == null)
            app = new Prexonite::Application("Interactive_Scripting");
        else
            println("Using compiled application ($(app.Id))");
        
        //Create a new loader (='compiler') if necessary
        if(ldr == null)
            ldr = new ::Loader(engine, app);
        
        //Define a default prompt color
        prompt\color = ::ConsoleColor.Red;
        
        var buffer = new ::StringBuilder;
        //Compile some standard code into the interactive application
        buffer.AppendLine("var prompt = null;");
        if(Not app.Functions.Contains("exit"))
            buffer.AppendLine("function exit(c) namespace import sys.* does System::Environment.Exit(c ?? 0);");
        buffer.AppendLine("declare exit as quit;");

        // Top-level namespace import for common standard library functions and 
        // user-defined imports.
        // The user can modify the `import_specs` list via the `import` directive.
        // We retain the original default import spec so that the user 
        // can reset the import statement with `import clear`
        var default_import_specs = ["sys.*","sys.seq.*"];
        var import_specs = default_import_specs >> to_list;

        function render_import_statement() {
            var importSpec = import_specs >> foldr((l,r) => if(r == "") l else "$l,$r","");  
            return "namespace import $importSpec;";
        }

        buffer.AppendLine(render_import_statement());

        ldr.LoadFromString(buffer.ToString);
        buffer.Length = 0;
        
        var errors;
        var lastCode;
        
        //This function tries to load code from the buffer
        function tryLoad()
        {
            try 
            {
                var exc = null;
                lastCode = buffer.ToString; //Save the code for error reporting
                ldr.LoadFromString(lastCode);            
            } 
            catch(exc)
            {
                //Exceptions are truly exceptional, so they should be printed
                // out right away.
                green = () =>
                {
                    println(exc);
                    exc = null;
                    foreach(var err in errors)
                        println(err);
                };
                return false;
            }
            finally
            {
                //Save errors for review and clean up.
                buffer.Length = 0;
                errors = ~List.CreateFromList(ldr.Errors);
                ldr.Errors.Clear;            
            }
            return errors.Count == 0;
        }
        
        //Print errors (if 'otherErrors' is null, 'errors' is used)
        function printErrors(otherErrors) does red = () =>
        {
            otherErrors ??= errors;
            foreach(var err in otherErrors)
                println(err);
        };
        
        //Generate the next unique function id
        function nextFuncId = "eval\\" + evalStep++;
        
        //Function that shortens a string
        var shortenTo = 30;
        function shortened(s) = if(s.Length <= shortenTo) s else (s.Substring(0,shortenTo-3) + "...");
        
        //Get 'raw' using showPrompt (passing the value of the variable 'prompt' 
        // from inside 'app') until 'raw' is ":quit".
        //This 'for' syntax might look stupid at first but it manages to separate
        // more complex iteration logic from the loop body.
        // One only needs to look at the header to know under what conditions
        // the loop runs. In addition, the body code can use the traditional
        // 'continue' statement to skip an iteration.
        for(var raw; do raw = showPrompt(app.Variables["prompt"].Value.self); until raw.ToLower == ":quit")
        {        
            var lowRaw = raw.ToLower;
            var funcId = nextFuncId; //<-- get the first unique function id
            var cmd = "r"; //<-- assume execution of code
            var printPrefix = null; //<-- text to print before running the user input (if non-null)
            
            if(lowRaw == ":r" or lowRaw == ":reload") //this directive restarts prx\main with the same arguments. See 'prx_main.pxs' for details.
            {
                reboot;
                return;          
            }
            else if(lowRaw.StartsWith(":c ") or lowRaw.StartsWith(":compile "))
            {
                cmd = "c";
                raw = raw.Substring(raw.IndexOf(" "));
                goto executeStatement;
            }
            else if(raw.StartsWith("=")) //force compilation as an expression
            {
                raw = raw.Substring(1);
                buffer.Append = "function $(funcId)() does println(\"$(shortened(raw).Escape) = \") = \n$(raw)\n;";
                if(Not tryLoad)
                {
                    printErrors;
                    continue;   
                }
            }
            else if(raw.StartsWith("::")) //Must be a static get/set
                goto executeStatement;
            else if(raw.StartsWith(":")) //Global code
            {
                buffer.Append = raw.Substring(1);
    executeGlobal:
                if(Not tryLoad)
                {
                    printErrors;
                    continue;
                }  
                cmd = "g"; //do not execute anything          
            }
            else if(raw.ToLower.StartsWith("global ")) //Global code too
            {
                buffer.Append = raw.Substring(7);
                goto executeGlobal;
            }
            else if(lowRaw.StartsWith("import "))
            {
                cmd = "g"; //do not execute anything
                var spec = raw.Substring(7).Trim();
                var old_specs;
                if(spec == "clear") 
                {
                    old_specs = null;
                    import_specs = default_import_specs >> to_list;
                }
                else 
                {
                    old_specs = import_specs >> to_list;
                    import_specs[] = spec;
                }
                // Apply the new imports; 
                buffer.Append(render_import_statement());
                println(buffer);
                if(not tryLoad) 
                {
                    printErrors;
                    // restore old specs; otherwise the 
                    import_specs = old_specs;
                }
            }
            else
            {
    executeStatement:
                var printPrefix = shortened(raw) + " = ";
                //First, try to compile the code as an expression
                buffer.Append(" function ");
                buffer.Append(funcId);
                buffer.Append("() = (\n");
                buffer.Append(raw);
                buffer.Append("\n); ");
                if(Not tryLoad)
                {
                    //should that fail, try to compile the code as a statement
                    var evalErrors = errors;
                    var evalCode = lastCode;

                    funcId = nextFuncId;
                    buffer.Append(" function ");
                    buffer.Append(funcId);
                    buffer.Append("() {\n");
                    buffer.Append(raw);
                    buffer.Append("\n ; }");
                    printPrefix = null;

                    if(Not tryLoad)
                    {
                        //if both fails, the code must be wrong.
                        // show why it can't be an expression
                        println("(" + raw + ") is not an expression:");
                            println(evalCode);
                        printErrors(evalErrors);

                        // show why it can't be a statement
                        println;
                        println("{" + shortened(raw) + "; } is also not a statement:");
                            println(lastCode);
                        printErrors(errors);

                        continue;
                    }
                }
            }             
            
            try
            {
                if(cmd == "r")
                {
                    //A function needs to be run
                    if(printPrefix != null) {
                        print(printPrefix);
                    }
                    if(!app.Functions[funcId] is Null) {
                        var result = app.Functions[funcId].Run(engine);
                        println(result.self);
                    }
                }
                else if(cmd == "c")
                {
                    var codeSB = new System::Text::StringBuilder;
                    unless(app.Functions[funcId] is null)
                        app.Functions[funcId].Store(codeSB);
                    println(codeSB);
                }
            }
            catch(var exc)
            {
               green = () => println(exc);
            }
            finally
            {
                function removeEvalFunctions()
                {
                    var toRemove = app.Functions
                                    >> filter(func => func.Id.StartsWith("eval\\"))
                                    >> to_list;
                    
                    foreach(var func in toRemove)
                        app.Functions.Remove(func);
                }
                removeEvalFunctions();
            } //end finally
        } //end for -> next prompt
    }

}