// Prexonite
//
// Copyright (c) 2011, Christian Klauser
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification,
//  are permitted provided that the following conditions are met:
//
//     Redistributions of source code must retain the above copyright notice,
//          this list of conditions and the following disclaimer.
//     Redistributions in binary form must reproduce the above copyright notice,
//          this list of conditions and the following disclaimer in the
//          documentation and/or other materials provided with the distribution.
//     The names of the contributors may be used to endorse or
//          promote products derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
//  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Name prx::cli;
Description "prx command line interface (compiler and REPL)";
Author "Christian Klauser";

build does require("prx_interactive.pxs", "prx_lib.pxs");

namespace prx.cli
    import sys.*,
           sys.seq.*,
           prx.cli(host),
           prx.cli.repl(ldr,prx\interactive)
{
    var engine = new Prexonite::Engine; //<-- the engine that we will run in
    var app; //<-- the compiled application
    var ldr; //<-- the loader used to compile 'app'

    //The follwing code block is compiled as
    // part of the initialization of the application.
    // Global variable assignments too are part of the this 'init' function.
    {
        //The interactive prompt uses a second, isolated engine for execution.
        var thisE = thisEngine; // (this is the engine that runs the CLI)

        //Copy those timing commands from the current engine to the
        // interactive engine
        foreach(var alias in [
                @"timer\start",
                @"timer\stop",
                @"timer\elapsed",
                @"timer\reset",
                @"createBenchmark",
                @"__console",
                @"host\self_assembling_build_plan",
                @"host\prx_path"])
            engine.Commands.AddUserCommand(alias, thisE.Commands[alias]);

        //Set up the console
        if(supportsTabs)
           {
            host.console.OutColor = ::ConsoleColor.White;
            host.console.PromptColor = ::ConsoleColor.Red;
            host.console.ErrorColor = ::ConsoleColor.Green;
            host.console.DoBeep = false;
        }
    }

    // The following functions are defined further down (after `prx\main`)
    declare function displayHelp, execute_legacy, execute_plan;

    Add Prexonite::Compiler to Import;

    function printHead does println("** PREXONITE v" + asm(ldr.app).Meta["Version"].Text +
        " ** (Runtime version $(Prexonite::Engine.PrexoniteVersion))");

    var originalArgs;

    function plurality(noun, n) =
        if(n == 1)
            noun + "s"
        else
            noun;

    //Define the states of the arguments parser
    namespace states {
        var compile = 3;      //Just compiling the application
        var target = 4;       //Next argument defines the target
        var run = 5;          //Running the application after compilation
        var interactive = 6;  //Launching the interactive console after compilation
        var arg = 7;          //Gathering arguments for the application
        var reference = 8;    //Next argument defines an additional moduel to load
        var search_path = 9;  //Next argument is an additional search path
    }

    function prx\main()
    {
        var arguments = var args;
        originalArgs = arguments;

        if(arguments == null or arguments.Length == 0)
        {
            printHead;
            println("NO ARGUMENTS DETECTED.");
            displayHelp;
            return;
        }

        //Define default settings
        var state = states.run;      //Run the compiled application b default
        var arg_reverse_state = state;
        var state_after_option = state;
        var sourceFiles = [];
        var searchPaths = [];
        var verbose = false;
        var headerOnly = false;
        var debugging = false;
        var suppressWarnings = false;
        var useLegacyLoader = false;
        var targetPath;
        //supportsTabs is a global variable

        var scriptArgs = [];

        function expect_option_argument(new_state)
        {
            state_after_option = state;
            state = new_state;
        }

        function restore_after_option
        {
            state = state_after_option;
        }

        //Interpret arguments one by one
        foreach(var current in arguments)
        {
            if(current == null or current.Length == 0)
                continue;
            else if(state == states.arg) //ignore options after -a
                scriptArgs[] = current;
            else if(state == states.search_path)
            {
                searchPaths += current;
                restore_after_option;
            }
            else if(state == states.reference)
            {
                // add but expect additional arguments
                sourceFiles.Add = current;
                restore_after_option;
            }            
            else if(state == states.target)
            {
                targetPath = current;
                restore_after_option;
            }
            else if(current.StartsWith("-"))
                if(current == "-c")         //  -c Compile
                    state = states.compile;
                else if(current == "-t")    //  -t Target
                    expect_option_argument = states.target;
                else if(current == "-i")    //  -i Interactive
                    state = states.interactive;
                else if(current == "-r")    //  -r  Reference
                    expect_option_argument = states.reference;
                else if(current == "-v" or current == "--verbose")    //  -v  Verbose
                    verbose = true;
                else if(current == "-h" or current == "--header")    //  -h  Header only
                    headerOnly = true;
                else if(current == "-a" || current == "--")    //  -a  Arguments
                {
                    arg_reverse_state = state;
                    state = states.arg;
                }
                else if(current == "-b" or current == "--no-tab")    //  -b  disable tab completion (for piped input)
                    supportsTabs = false;
                else if(current == "-d" or current == "--debug")    //  -d  Debugging
                    debugging = true;
                else if(current == "-nowarn" or current == "--nowarn")
                    // the single dash `-nowarn` is recognized for backwards compatibility
                    suppressWarnings = true;
                else if(current == "--legacy")
                    useLegacyLoader = true;
                else if(current == "-s" or current == "--search-path")
                    expect_option_argument = states.search_path;
                else if(current == "-?")    //  -h  Help
                {
                    displayHelp;
                    return;
                }
                else
                    red = () => println("Unknown option " + current + "."); //see *1*
            else if(state == states.compile Or state == states.run Or state == states.interactive)
            {
                sourceFiles.Add = current;
                // If legacy wasn't specified treat everything after the first positional
                // argument (the file to run) as an argument to the application to run
                if(not useLegacyLoader)
                {
                    arg_reverse_state = state;
                    state = states.arg;
                }
            }
        }

        //*1*: 'red' is a function that takes in another function/lambda expression
        // and executes it in a context where console output is printed in red.
        // See it's definition in 'prx_lib.pxs' for more details.

        if(state == states.arg)
            state = arg_reverse_state;

        //'run' and 'compile' require source files. 'interactive' doesn't.
        if(sourceFiles.Count == 0)
        {
            printHead;
            unless(state == states.interactive){
                red(() => println("No source files specified."));
                return;
            }
        }

        //Assemble a default target path if necessary
        if(targetPath is null or targetPath.Length == 0)
            targetPath =
                (unless(state == states.interactive || sourceFiles.Count == 0)
                    System::IO::Path.GetFileNameWithoutExtension(sourceFiles[0])
                 else
                    @"prx_interactive_app"
                )+ ".c.pxs";

        // Set up search path
        var plan = host.self_assembling_build_plan;
        var prx_path = host.prx_path;
        plan.SearchPaths.Add(System::IO::Path.Combine(prx_path, "psr", "_2"));
        if(sourceFiles.Count > 0) {
            if( System::IO::File.Exists(var lastSourceFile = sourceFiles[sourceFiles.Count - 1])
                    && (var dir = System::IO::Path.GetDirectoryName(lastSourceFile)) is not null) {
                // translate to full path to force resolution as file (instead of ref-spec)
                sourceFiles[sourceFiles.Count - 1] = System::IO::Path.GetFullPath(lastSourceFile);                           
                plan.SearchPaths.Add(dir);
            } else {
                plan.SearchPaths.Add(System::Environment.CurrentDirectory);
            }
        }
        searchPaths >> each(plan.SearchPaths.Add(?));

        //Report
        if(verbose)
        {
            printHead;
            unless(state == states.interactive)
                println("Target:\n    " + targetPath + "\nSources:");
        }

        // Assemble options for our two implementations
        var options = new Structure;
        options.\("debugging") = debugging;
        options.\("state") = state;
        options.\("verbose") = verbose;
        options.\("suppressWarnings") = suppressWarnings;
        options.\("scriptArgs") = scriptArgs;
        options.\("headerOnly") = headerOnly;
        options.\("sourceFiles") = sourceFiles;
        options.\("targetPath") = targetPath;

        if(useLegacyLoader)
        {
            // Old direct interaction with loader. Can only build a single module
            execute_legacy(options);
        }
        else
        {
            // Compilation via self-assembling build plan
            execute_plan(options);
        }
    }

    function reboot does prx\main(originalArgs);

    function displayHelp does print(
        "Usage:\n" +
        "\tprx [-v | -d | -b | -s <search_path> | -r <reference> | -i] <module> [--] [<arguments...>]\n" +
        "\tprx -c [-t <target>] [-v | -d | -b | -s <search_path> | -r <reference>] <module>\n" +
        "\tprx -i\n" +
        "\tprx -?\n" +
        "\tprx --legacy <sources...> [-v | -d | -h] -c [-t <target>]\n" +
        "\tprx --legacy <sources...> [-v | -d | -b] (-i | [-a <arguments...>])\n" +
        "\n" +
        "Run scripts with `prx ./file_name.pxs` or with `prx module.name`." +
        "Enter interactive mode (with or without a source module) using the `-i` switch.\n"+
        "Produce a compiled version of a module using the `-c` switch.\n"+
        "Use `--search-path` look for modules and files in additional directories. \n"+
        "\n"+
        "--verbose -v          enables additional output.\n"+
        "--header -h           extracts declarations (only with -c).\n"+
        "--no-tab -b           disables tab completion (tab completion only supported on windows).\n"+
        "-- -a                 forwards the rest of the arguments to the executing script.\n" +
        "--debug -d            enables debugging mode\n" +
        "--search-path <path>  also searches for files/modules in that directory.\n" + 
        "          -s <path>   Can be specifield multiple times.\n" +
        "-r <module>           load an additional module\n" +
        "--nowarn              disables all warnings\n" +
        "--legacy              uses Prexonite 1 loader\n");

    function execute_legacy(options)
    {
        var debugging = options.debugging;
        var state = options.state;
        var verbose = options.verbose;
        var suppressWarnings = options.suppressWarnings;
        var scriptArgs = options.scriptArgs;
        var headerOnly = options.headerOnly;
        var sourceFiles = options.sourceFiles;
        var targetPath = options.targetPath;

        if(debugging)
            sourceFiles.Insert(0,@"psr\debug\debug.pxs");

        //Create a new application. The id extracted from the first source file's name is just decoration
        app = new ::Application(
            unless(state == states.interactive || sourceFiles.Count == 0)
                System::IO::Path.GetFileNameWithoutExtension(sourceFiles[0])
            else
                @"prx\interactive\app");

        //Create the loader (the compiler) for this application
        var options = new ::LoaderOptions(engine, app);
        options.StoreSourceInformation = debugging;

        ldr = new ::Loader(options);
        var exc = null; //<--- holds exceptions

        try
        {
            foreach(var sourceFile in sourceFiles)
            {
                if(verbose)
                    println("  * " + sourceFile);

                //The next call compiles 'sourceFile' into 'app'
                ldr.RequireFromFile(sourceFile); //require only loads files that haven't been loaded before.
            }
            if(verbose)
                println("Loading of sources done.");
        }
        catch(var exc)
        {
            green(() => println(exc));
        }

        //Display information
        var showInfos = debugging and ldr.Infos.Count > 0;
        if(showInfos)
        {
            println("Information:");
            foreach(var info in ldr.Infos)
                println(info);
        }

        //Display warnings
        var showWarnings = not suppressWarnings and ldr.Warnings.Count > 0;
        if(showWarnings)
        {
            yellow(() =>
                {
                    println("Warnings: (disable with -nowarn)");
                    foreach(var warning in ldr.Warnings)
                        println(warning);
                }
            );
        }

        //Compilation errors are not thrown as exceptions but held in 'ldr.Errors'
        if(ldr.Errors.Count != 0 Or exc is not null)
        {
            red(() =>
                {
                    println("Compilation completed, but errors detected. ");
                    foreach(var err in ldr.Errors)
                        println(err);
                });
            println("Compilation summary:");
            if(showInfos)
                println("\t",ldr.Infos.Count," ",plurality("info",ldr.Infos.Count));
            if(showWarnings)
                yellow(println("\t",ldr.Warnings.Count," ",plurality("warnings",ldr.Warnings.Count),?));
            red(println("\t",ldr.Errors.Count," ",plurality("errors",ldr.Errors.Count),?));
            println;
            exc = null;
            if(debugging and state == states.interactive) //in debugging mode, allow the script to be examined
            {
                println("Entering interactive mode for debugging.");
                prx\interactive;
            }
            else
            {
                println("Aborting (Enable debugging for inspection of partial results in interactive mode)");
            }
            return;
        }

        //Decide what to do with the just compiled application
        if(state == states.interactive)
        {
            //'prx\interactive' is defined in 'prx_interactive.pxs'
        runInteractive:
            prx\interactive;
        }
        else if(state == states.run) // states.arg is synonymous
        {
            //The application might not run in non-interactive mode
            if(app.Meta["interactive"].Switch)
            {
                //The application requires to be run in interactive mode.
                //Extract the id of the interactive entry function from the
                // applications metadata...
                var intMainId =
                    if(app.Meta.ContainsKey("entry\\interactive"))
                        app.Meta["entry\\interactive"].Text
                    else
                        "main\\interactive"; //... or use a default name.

                //If that function exists, execute it first
                if(app.Functions.Contains(intMainId))
                {
                    var intMain = app.Functions[intMainId].Run(engine, scriptArgs~Object<"Prexonite.PValue[]">);
                }

                //before going into interactive mode.
                goto runInteractive;
            }
            else
            {
                var mainId =
                    if(app.Meta.ContainsKey(Prexonite::Application.EntryKey))
                        app.Meta[Prexonite::Application.EntryKey].Text
                    else
                        Prexonite::Application.DefaultEntryFunction;

                if(not app.Functions.Contains(mainId))
                {
                    red(() => println("Cannot find entry function named `$mainId`."));
                    return;
                }

                //Run the application (run it's entry function).
                // the script arguments have to be converted to a Prexonite.PValue[] first.
                app.Run(engine, scriptArgs~Object<"Prexonite.PValue[]">);
            }
        }
        else
        {   //state = states.compile
            //Store the compiled application in a file.
            using(var writer = new System::IO::StreamWriter(targetPath, false))
            {
                if(headerOnly)
                    ldr.StoreSymbols(writer);
                else
                    ldr.Store(writer);
            }
        }
    }

    function assemble_from_file_async(plan,file)
    {
        return plan.ResolveAndAssembleAsync(file, System::Threading::CancellationToken.None);
    }

    function execute_plan(options)
    {
        // Use the self-assembling build plan also used by the host to assemble
        // this shell program. This saves us from having to load the standard library
        // more than once.
        // Additionally, programs could access prx.cli code at no additional cost,
        // since it has also been assembled via that plan.
        // The application would not have access to state of this instance of prx.cli, however.
        var plan = host.self_assembling_build_plan;
        var target;
        function is_info(msg) = msg.Severity~Int == Prexonite::Compiler::MessageSeverity.Info;
        function is_warning(msg) = msg.Severity~Int == Prexonite::Compiler::MessageSeverity.Warning;
        function is_error(msg) = msg.Severity~Int == Prexonite::Compiler::MessageSeverity.Error;
        function print_message_subset(messages, filter, color) does
            color.(messages >> seq.filter(filter) >> each(println(?)));
        function print_all_messages(messages)
        {
            if(options.debugging)
                print_message_subset(messages, is_info(?), ?.());
            if(not options.suppressWarnings)
                print_message_subset(messages, is_warning(?), yellow(?));
            print_message_subset(messages, is_error(?), red(?));
        }
        try {
            var entryDesc;
            if(options.sourceFiles.Count > 0)
            {
                // Use self-assembly mechanism on each source file.
                // The last source file is the one we will run, the others just "seed" the plan.
                // This is useful if you want to make sure that a particular version of a module is used
                // (maybe one that wouldn't otherwise be found by the self-assembly mechanism)
                foreach(var file in options.sourceFiles)
                {
                    entryDesc = assemble_from_file_async(plan, file);
                }
                entryDesc = entryDesc.Result;
            }
            else if(options.state == states.interactive)
            {
                // Define an empty module into which REPL code will be injected.
                // The easiest, if not the fastest, way to do this, is by compiling the
                // following snippet of Prexonite Script:
                entryDesc = plan.AssembleAsync(Prexonite::Compiler::Build::Source.FromString(@"
                    Name interactive_app;
                    "),
                    System::Threading::CancellationToken.None).Result;
            }
            else
            {
                // Nothing to do here
                return;
            }

            var result = Prexonite::Compiler::Build::BuildExtensions.Load(plan, entryDesc.Name);
            app = result.Item1; //~Application
            target = result.Item2; // ~ITarget

            print_all_messages(target.Messages);
            if(target.Exception is not null)
                throw target.Exception;
            if(target.Messages >> exists(is_error(?)))
                return;

            var app_is_interactive = app.Meta["interactive"].Switch;

            // Run "main" function
            //    mandatory for "run"
            //    optional for "interactive"
            if(options.state == states.run or options.state == states.interactive)
            {

                var entryKey = if(options.state == states.run and not app_is_interactive)
                        Prexonite::Application.EntryKey
                    else
                        @"entry\interactive";

                var entryRequired = app.Meta.ContainsKey(entryKey)
                                    or options.state == states.run;
                var mainId = app.Meta[entryKey];

                if(not app.Functions.Contains(mainId))
                {
                    if(entryRequired)
                    {
                        red(() => println("Cannot find entry function named `$mainId`."));
                        return;
                    }
                }
                else
                {
                    //Run the application (run it's entry function).
                    // the script arguments have to be converted to a Prexonite.PValue[] first.
                    app.Functions[mainId].Run(engine,
                        options.scriptArgs~Object<"Prexonite.PValue[]">);
                }
            }

            // Prepare a loader targeting the module
            if(options.state == states.interactive or options.state == states.compile)
            {
                // Reconstruct "external" symbol environment (symbols exported by dependencies)
                var external = Prexonite::Compiler::Symbolic::SymbolStore.Create(null, (
                        entryDesc.Dependencies
                        >> map(name => {
                            var depTar = Prexonite::Compiler::Build::BuildExtensions.Build(plan, name);
                            var origin = new Object<"Prexonite.Compiler.Symbolic.SymbolOrigin+ModuleTopLevel">(
                                depTar.name, Prexonite::Compiler::NoSourcePosition.Instance);
                            return depTar.Symbols >> map(kvp =>
                                new Prexonite::Compiler::Symbolic::SymbolInfo(kvp.Value, origin, kvp.Key)
                            );
                        })
                        >> call(append(?))
                        >> to_list
                    )~Object<"Prexonite.Compiler.Symbolic.SymbolInfo[]">);

                // Configure loader (mimics environment present during build)
                var opt = new Prexonite::Compiler::LoaderOptions(engine, app, external);
                opt.RegisterCommands = false;
                opt.ReconstructSymbols = false;
                opt.StoreSymbols = true;
                opt.StoreSourceInformation = options.debugging;
                // Copy exported declarations
                // Loader acts as if it had declared everything that our target module exports
                rt.debug(target);
                ldr = new Prexonite::Compiler::Loader(opt);
                foreach(var kvp in target.Symbols)
                {
                    ldr.Symbols.Declare(kvp.Key, kvp.Value);
                }
            }

            // Store serialized representation of target module (only target module)
            if(options.state == states.compile)
            {
                using(var writer = new System::IO::StreamWriter(options.targetPath, false))
                {
                    if(options.headerOnly)
                        ldr.StoreSymbols(writer);
                    else
                        ldr.Store(writer);
                }
            }

            if(options.state == states.interactive or app_is_interactive)
            {
                prx\interactive;
            }
        } catch(var e) {
            function e_handler(e)
            {
                if(e is System::AggregateException)
                {
                    foreach(var ie in e.InnerExceptions)
                        e_handler(ie);
                }
                else if(e is Prexonite::PrexoniteRuntimeException and e.InnerException is not null)
                {
                    e_handler(e.InnerException);
                }
                else if(e is Prexonite::Compiler::Build::BuildFailureException)
                {
                    print_all_messages(e.Messages);
                }
                else
                {
                    green(() => println(e));
                }
            }
            e_handler(e);
        }
    }

} export(*,
    not states);

// Defines the entry function for this module.
// This needs to appear at the module level.
// The `[\sps]` prevents the function from being exported to other modules
Entry prx\main;
function prx\main()[\sps] = sys.call(prx.cli.prx\main(?),var args);

{  sys.rt.compile_to_cil; }