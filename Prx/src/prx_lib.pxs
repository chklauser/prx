namespace prx.cli
    import sys.*
{
    // Declare commands that are only available in the prx host.
    namespace timer {
        declare(
            start = ref command @"timer\start",
            stop = ref command @"timer\stop",
            reset = ref command @"timer\reset",
            elapsed = ref command @"timer\elapsed",
        );
    }
    
    namespace host {
        declare(
            //Access to an experimental terminal
            console = ref command "__console",
            //Access to build infrastructure of the host
            prx_path = ref command @"host\prx_path",
            self_assembling_build_plan = ref command @"host\self_assembling_build_plan"
        );
    }
    
    namespace benchmark {
        declare(
            create_benchmark = ref command "createBenchmark" 
        )
    }

    //Not all environments may support colors...
    var supportsColors = (supportsColors ?? true)~Bool;

    //Run 'f' in a context where console output has the color 'color'.
    function runInDifferentColor(ref f, color)
    {
    	var r;
        if(supportsColors)
        {
        	var orig = ::Console.ForegroundColor;
        	::Console.ForegroundColor = color;
            try {
        	    r = f();
            } finally {
        	    ::Console.ForegroundColor = orig;
            }
        }
        else
        {
            r = f();   
        }
        return r;
    }

    //Shortcuts for commonly used colorations
    ref red = 
        if(supportsColors)
            f => runInDifferentColor(f, ::ConsoleColor.Red)
        else
            f => f.()
        ;
    ref green = 
        if(supportsColors)
            runInDifferentColor(?, ::ConsoleColor.Green)
        else
            ?.()
        ;
    ref yellow =
        if(supportsColors)
            runInDifferentColor(?, ::ConsoleColor.Yellow)
        else
            ?.()
        ;

    var isWindowsNT = System::Environment.OSVersion.Platform~Int == System::PlatformID.Win32NT~Int; 
      
    function __consoleAvailable = asm(ldr.eng).Commands.Contains("__console");
      
    var supportsTabs = (supportsTabs ?? (isWindowsNT && __consoleAvailable))~Bool;
        
    function readline = 
        if(supportsTabs)
            host.console.ReadLine
        else
            System::Console.ReadLine;
        
    //Show prompt and read line
    var prompt\color; 
    function showPrompt(q) does
    {
    	declare var prompt\color as color;
        q ??= "PRX> ";
        runInDifferentColor( () => print(q), 
            if(color != null) color else ::Console.ForegroundColor);
    	return readline;
    }

    /**
     * Reports progress of a series of tasks.
     * Usage:
     *    report(
     *        "heating water": () => heatWater(),
     *        "adding vegetables": () => vegies.Add(new carrots()))
     *    );
     * Will result in:
     *    heating water...done.
     *    adding vegetables...done.
     * With "done." only printed after the corresponding task
     * has finished.
     */
    function report
    {
    	var r = null;
        foreach(var arg in var args)
        {
            if(arg is not Prexonite::Types::PValueKeyValuePair)
                throw "Arguments must be key value pairs!";
                
            var msg = arg.Key;
            var act = arg.Value;
            
            print("$msg...");
            r = act.();
            println("done.");
        }
        return r;
    }

    var prompt = null;

    //Functions that provide access to the currently executing engine and application.
    function thisEngine = asm ( ldr.eng );
    function thisApplication = asm ( ldr.app );

}